{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"esparto Introduction esparto is a simple HTML and PDF document generator for Python. The API design emphasises productivity and reliability over flexibility or complexity - although you should find that it serves many use cases more than adequately. esparto is suitable for tasks such as: Designing simple web pages Automated MI reporting Collating and sharing data graphics ML model performance and evaluation documents Main Features Lightweight API Jupyter Notebook support Output self-contained HTML and PDF files Responsive layout from Bootstrap No CSS or HTML required Automatic conversion for: Markdown Images Pandas DataFrames Matplotlib Bokeh Plotly Installation esparto is available from PyPI: pip install esparto If PDF output is required, weasyprint must also be installed: pip install weasyprint Dependencies python >= 3.6 jinja2 markdown Pillow weasyprint (optional - for PDF output) License MIT Documentation Full documentation and examples are available at domvwt.github.io/esparto/ . Basic Usage import esparto as es # Instantiating a Page page = es . Page ( title = \"Research\" ) # Page layout hierarchy: # Page -> Section -> Row -> Column -> Content # Add or update content # Keys are used as titles page [ \"Introduction\" ][ \"Part One\" ][ \"Item A\" ] = \"lorem ipsum\" page [ \"Introduction\" ][ \"Part One\" ][ \"Item B\" ] = \"./pictures/image1.jpg\" # Add content without a title page [ \"Introduction\" ][ \"Part One\" ][ \"\" ] = \"Hello, Wolrd!\" # Replace child at index - useful if no title given page [ \"Introduction\" ][ \"Part One\" ][ - 1 ] = \"Hello, World!\" # Set content and return input object # Useful in Jupyter Notebook as it will be displayed in cell output page [ \"Methodology\" ][ \"Part One\" ][ \"Item A\" ] << \"dolor sit amet\" # >>> \"dolor sit amet\" # Set content and return new layout page [ \"Methodology\" ][ \"Part Two\" ][ \"Item B\" ] >> \"foobar\" # >>> {'Item B': ['Markdown']} # Show document structure page . tree () # >>> {'Research': [{'Introduction': [{'Part One': [{'Item A': ['Markdown']}, # {'Item B': ['Image']}]}]}, # {'Methodology': [{'Part One': [{'Item A': ['Markdown']}]}, # {'Part Two': [{'Item A': ['Markdown']}]}]}]} # Remove content del page [ \"Methodology\" ][ \"Part One\" ][ \"Item A\" ] del page . methodology . part_two . item_b # Access existing content as an attribute page . introduction . part_one . item_a = \"./pictures/image2.jpg\" page . introduction . part_one . tree () # >>> {'Part One': [{'Item A': ['Image']}, # {'Item B': ['Image']}, # {'Column 2': ['Markdown']}]} # Save the document page . save_html ( \"my-page.html\" ) page . save_pdf ( \"my-page.pdf\" ) Example Output Iris Report - HTML | PDF Bokeh and Plotly - HTML | PDF","title":"Overview"},{"location":"#esparto","text":"","title":"esparto"},{"location":"#introduction","text":"esparto is a simple HTML and PDF document generator for Python. The API design emphasises productivity and reliability over flexibility or complexity - although you should find that it serves many use cases more than adequately. esparto is suitable for tasks such as: Designing simple web pages Automated MI reporting Collating and sharing data graphics ML model performance and evaluation documents","title":"Introduction"},{"location":"#main-features","text":"Lightweight API Jupyter Notebook support Output self-contained HTML and PDF files Responsive layout from Bootstrap No CSS or HTML required Automatic conversion for: Markdown Images Pandas DataFrames Matplotlib Bokeh Plotly","title":"Main Features"},{"location":"#installation","text":"esparto is available from PyPI: pip install esparto If PDF output is required, weasyprint must also be installed: pip install weasyprint","title":"Installation"},{"location":"#dependencies","text":"python >= 3.6 jinja2 markdown Pillow weasyprint (optional - for PDF output)","title":"Dependencies"},{"location":"#license","text":"MIT","title":"License"},{"location":"#documentation","text":"Full documentation and examples are available at domvwt.github.io/esparto/ .","title":"Documentation"},{"location":"#basic-usage","text":"import esparto as es # Instantiating a Page page = es . Page ( title = \"Research\" ) # Page layout hierarchy: # Page -> Section -> Row -> Column -> Content # Add or update content # Keys are used as titles page [ \"Introduction\" ][ \"Part One\" ][ \"Item A\" ] = \"lorem ipsum\" page [ \"Introduction\" ][ \"Part One\" ][ \"Item B\" ] = \"./pictures/image1.jpg\" # Add content without a title page [ \"Introduction\" ][ \"Part One\" ][ \"\" ] = \"Hello, Wolrd!\" # Replace child at index - useful if no title given page [ \"Introduction\" ][ \"Part One\" ][ - 1 ] = \"Hello, World!\" # Set content and return input object # Useful in Jupyter Notebook as it will be displayed in cell output page [ \"Methodology\" ][ \"Part One\" ][ \"Item A\" ] << \"dolor sit amet\" # >>> \"dolor sit amet\" # Set content and return new layout page [ \"Methodology\" ][ \"Part Two\" ][ \"Item B\" ] >> \"foobar\" # >>> {'Item B': ['Markdown']} # Show document structure page . tree () # >>> {'Research': [{'Introduction': [{'Part One': [{'Item A': ['Markdown']}, # {'Item B': ['Image']}]}]}, # {'Methodology': [{'Part One': [{'Item A': ['Markdown']}]}, # {'Part Two': [{'Item A': ['Markdown']}]}]}]} # Remove content del page [ \"Methodology\" ][ \"Part One\" ][ \"Item A\" ] del page . methodology . part_two . item_b # Access existing content as an attribute page . introduction . part_one . item_a = \"./pictures/image2.jpg\" page . introduction . part_one . tree () # >>> {'Part One': [{'Item A': ['Image']}, # {'Item B': ['Image']}, # {'Column 2': ['Markdown']}]} # Save the document page . save_html ( \"my-page.html\" ) page . save_pdf ( \"my-page.pdf\" )","title":"Basic Usage"},{"location":"#example-output","text":"Iris Report - HTML | PDF Bokeh and Plotly - HTML | PDF","title":"Example Output"},{"location":"01-getting-started/installation/","text":"Installation Stable release To install esparto, run this command in your terminal: $ pip install esparto This is the preferred method to install esparto, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From sources The esparto project uses Poetry to manage the virtual environment, dependencies, and build process. Sources for esparto can be downloaded from the Github repo . Clone the public repository from: $ git clone git://github.com/domvwt/esparto Once you have a copy of the source, navigate into the directory: $ cd esparto And install with: $ poetry install","title":"Installation"},{"location":"01-getting-started/installation/#installation","text":"","title":"Installation"},{"location":"01-getting-started/installation/#stable-release","text":"To install esparto, run this command in your terminal: $ pip install esparto This is the preferred method to install esparto, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"01-getting-started/installation/#from-sources","text":"The esparto project uses Poetry to manage the virtual environment, dependencies, and build process. Sources for esparto can be downloaded from the Github repo . Clone the public repository from: $ git clone git://github.com/domvwt/esparto Once you have a copy of the source, navigate into the directory: $ cd esparto And install with: $ poetry install","title":"From sources"},{"location":"01-getting-started/quickstart/","text":"Quickstart The esparto library can be installed with pip. Only the minimal package requirements will be installed by default: pip install esparto For PDF output we will also require weasyprint , although this is optional: pip install weasyprint Documents start with a Page object, to which user content can be added iteratively. Creating a page, adding basic content, and saving the file can be achieved in a few short lines: import esparto as es my_page = es . Page ( title = \"Esparto Quickstart\" ) content_md = \"\"\" Your *content* goes **here!** \"\"\" my_page += content_md my_page . save_html ( \"esparto-quick.html\" ) The rendered HTML document: To add an image, pass a filepath to the page: import esparto as es my_page = es . Page ( title = \"Esparto Quickstart\" ) content_md = \"\"\" Your *content* goes **here!** \"\"\" my_page += content_md my_page += \"image.jpg\" my_page . save_html ( \"esparto-quick-image.html\" ) Esparto determines that the string points to a valid image and loads the file: And for PDF output: my_page . save_pdf ( \"esparto-quick-image.pdf\" ) Please see the examples page for more.","title":"Quickstart"},{"location":"01-getting-started/quickstart/#quickstart","text":"The esparto library can be installed with pip. Only the minimal package requirements will be installed by default: pip install esparto For PDF output we will also require weasyprint , although this is optional: pip install weasyprint Documents start with a Page object, to which user content can be added iteratively. Creating a page, adding basic content, and saving the file can be achieved in a few short lines: import esparto as es my_page = es . Page ( title = \"Esparto Quickstart\" ) content_md = \"\"\" Your *content* goes **here!** \"\"\" my_page += content_md my_page . save_html ( \"esparto-quick.html\" ) The rendered HTML document: To add an image, pass a filepath to the page: import esparto as es my_page = es . Page ( title = \"Esparto Quickstart\" ) content_md = \"\"\" Your *content* goes **here!** \"\"\" my_page += content_md my_page += \"image.jpg\" my_page . save_html ( \"esparto-quick-image.html\" ) Esparto determines that the string points to a valid image and loads the file: And for PDF output: my_page . save_pdf ( \"esparto-quick-image.pdf\" ) Please see the examples page for more.","title":"Quickstart"},{"location":"02-user-guide/custom-content/","text":"Coming soon!","title":"Coming soon!"},{"location":"02-user-guide/custom-content/#coming-soon","text":"","title":"Coming soon!"},{"location":"02-user-guide/document-design/","text":"Coming soon!","title":"Coming soon!"},{"location":"02-user-guide/document-design/#coming-soon","text":"","title":"Coming soon!"},{"location":"02-user-guide/examples/","text":"Examples These examples demonstrate recommended ways of working with esparto . Note that Jupyter Notebooks do not preserve the formatting of rendered content between sessions - be sure to re-run the examples in order to view the output as intended. Data Analysis The iris dataset is one of the most well known datasets in statistics and data science. This notebook shows how we can put together a simple data analysis report in esparto . This example covers: Text content with markdown formatting Including images from files Converting a Pandas DataFrame to a table Adding plots from Matplotlib and Seaborn Output: HTML | PDF Interactive Plotting The pandas-bokeh library offers convenient functions for producing interactive Bokeh plots with few lines of code. With the Plotly backend for Pandas we can access the Plotly Express API directly from the .plot() method of any DataFrame or Series. This notebook shows basic examples from each library: Interactive plotting with Bokeh and Plotly Adding interactive content to the page Output: HTML | PDF Note PDF output is not officially supported for Bokeh at this time.","title":"Examples"},{"location":"02-user-guide/examples/#examples","text":"These examples demonstrate recommended ways of working with esparto . Note that Jupyter Notebooks do not preserve the formatting of rendered content between sessions - be sure to re-run the examples in order to view the output as intended.","title":"Examples"},{"location":"02-user-guide/examples/#data-analysis","text":"The iris dataset is one of the most well known datasets in statistics and data science. This notebook shows how we can put together a simple data analysis report in esparto . This example covers: Text content with markdown formatting Including images from files Converting a Pandas DataFrame to a table Adding plots from Matplotlib and Seaborn Output: HTML | PDF","title":"Data Analysis"},{"location":"02-user-guide/examples/#interactive-plotting","text":"The pandas-bokeh library offers convenient functions for producing interactive Bokeh plots with few lines of code. With the Plotly backend for Pandas we can access the Plotly Express API directly from the .plot() method of any DataFrame or Series. This notebook shows basic examples from each library: Interactive plotting with Bokeh and Plotly Adding interactive content to the page Output: HTML | PDF Note PDF output is not officially supported for Bokeh at this time.","title":"Interactive Plotting"},{"location":"02-user-guide/general-usage/","text":"Offline Mode When working in an environment with no internet connection it is necessary to use inline content dependencies rather than the preferred Content Distribution Network (CDN). Offline mode can be activated by changing the relevant esparto.options attribute: import esparto as es es . options . offline_mode = True Matplotlib Output To produce sharp and scalable images, esparto defaults to SVG format for static plots. This can cause a significant drain on resources when plotting a high number of data points and so PNG format may be preferred. PNG format can be selected for all Matplotlib plots: es . options . matplotlib_output_format = \"png\" Or configured on a case by case basis: fig = df . plot () esparto_fig = es . FigureMpl ( fig , output_format = \"png\" ) Options provided directly to FigureMpl will override the global configuration. PDF Output From the API Saving a page to PDF is achieved through the API by calling the .save_pdf() method from a Page object: import esparto as es my_page = es . Page ( title = \"My Page\" ) my_page += \"image.jpg\" my_page . save_pdf ( \"my-page.pdf) In order to render plots for PDF output, they must be rendered to SVG. While this leads to consistent and attractive results for Matplotlib figures, it is less predictable and requires additional system configuration for Bokeh and Plotly objects. Plotly The preferred approach with Plotly is to use the Kaleido library, which is installable with pip: pip install kaleido Esparto will automatically handle the conversion, provided Kaleido is available. Make sure to inspect results for unusual cropping and other artifacts. Bokeh The approach taken by Bokeh is to use a browser and webdriver combination. I have not been able to make this work during testing but the functionality has been retained in esparto should you have more luck with it. See the Bokeh documenation on additional dependencies for exporting plots. Conversion should be handled by esparto, provided the Bokeh dependencies are satisfied. Saving from a Browser Alternatively, it is possible to save any HTML page as a PDF through the print menu in your web browser. This method should work with all content types.","title":"General Usage"},{"location":"02-user-guide/general-usage/#offline-mode","text":"When working in an environment with no internet connection it is necessary to use inline content dependencies rather than the preferred Content Distribution Network (CDN). Offline mode can be activated by changing the relevant esparto.options attribute: import esparto as es es . options . offline_mode = True","title":"Offline Mode"},{"location":"02-user-guide/general-usage/#matplotlib-output","text":"To produce sharp and scalable images, esparto defaults to SVG format for static plots. This can cause a significant drain on resources when plotting a high number of data points and so PNG format may be preferred. PNG format can be selected for all Matplotlib plots: es . options . matplotlib_output_format = \"png\" Or configured on a case by case basis: fig = df . plot () esparto_fig = es . FigureMpl ( fig , output_format = \"png\" ) Options provided directly to FigureMpl will override the global configuration.","title":"Matplotlib Output"},{"location":"02-user-guide/general-usage/#pdf-output","text":"","title":"PDF Output"},{"location":"02-user-guide/general-usage/#from-the-api","text":"Saving a page to PDF is achieved through the API by calling the .save_pdf() method from a Page object: import esparto as es my_page = es . Page ( title = \"My Page\" ) my_page += \"image.jpg\" my_page . save_pdf ( \"my-page.pdf) In order to render plots for PDF output, they must be rendered to SVG. While this leads to consistent and attractive results for Matplotlib figures, it is less predictable and requires additional system configuration for Bokeh and Plotly objects.","title":"From the API"},{"location":"02-user-guide/general-usage/#plotly","text":"The preferred approach with Plotly is to use the Kaleido library, which is installable with pip: pip install kaleido Esparto will automatically handle the conversion, provided Kaleido is available. Make sure to inspect results for unusual cropping and other artifacts.","title":"Plotly"},{"location":"02-user-guide/general-usage/#bokeh","text":"The approach taken by Bokeh is to use a browser and webdriver combination. I have not been able to make this work during testing but the functionality has been retained in esparto should you have more luck with it. See the Bokeh documenation on additional dependencies for exporting plots. Conversion should be handled by esparto, provided the Bokeh dependencies are satisfied.","title":"Bokeh"},{"location":"02-user-guide/general-usage/#saving-from-a-browser","text":"Alternatively, it is possible to save any HTML page as a PDF through the print menu in your web browser. This method should work with all content types.","title":"Saving from a Browser"},{"location":"03-api-reference/adaptors/","text":"esparto._adaptors Info The content_adaptor function is called internally when an explicit Content class is not provided. Objects are matched to a suitable Content class through single dispatch . import esparto as es # Text automatically converted to Markdown content. page = es . Page ( title = \"New Page\" ) page [ \"New Section\" ] = \"Example _markdown_ text.\" page . tree () {'New Page': [{'New Section': [{'Row 0': [{'Column 0': ['Markdown']}]}]}]} _adaptors private content_adaptor ( content ) Wrap content in the required class. Parameters: Name Type Description Default content Content Any content to be added to the document. required Returns: Type Description Content Content: Approriately wrapped content. Source code in esparto/_adaptors.py @singledispatch def content_adaptor ( content : Content ) -> Content : \"\"\" Wrap content in the required class. Args: content (Any): Any content to be added to the document. Returns: Content: Approriately wrapped content. \"\"\" if not issubclass ( type ( content ), Content ): raise TypeError ( f \"Unsupported content type: { type ( content ) } \" ) return content content_adaptor_bokeh ( content ) Convert Bokeh Layout to FigureBokeh content. Source code in esparto/_adaptors.py @content_adaptor . register ( BokehObject ) def content_adaptor_bokeh ( content : BokehObject ) -> FigureBokeh : \"\"\"Convert Bokeh Layout to FigureBokeh content.\"\"\" return FigureBokeh ( content ) content_adaptor_core ( content ) Convert markdown or image to Markdown or Image content. Source code in esparto/_adaptors.py @content_adaptor . register ( str ) def content_adaptor_core ( content : str ) -> Content : \"\"\"Convert markdown or image to Markdown or Image content.\"\"\" guess = guess_type ( content ) if guess and \"image\" in str ( guess [ 0 ]): return Image ( content ) return Markdown ( content ) content_adaptor_df ( content ) Convert Pandas DataFrame to DataFramePD content. Source code in esparto/_adaptors.py @content_adaptor . register ( DataFrame ) def content_adaptor_df ( content : DataFrame ) -> DataFramePd : \"\"\"Convert Pandas DataFrame to DataFramePD content.\"\"\" return DataFramePd ( content ) content_adaptor_mpl ( content ) Convert Matplotlib Figure to FigureMpl content. Source code in esparto/_adaptors.py @content_adaptor . register ( Figure ) def content_adaptor_mpl ( content : Figure ) -> FigureMpl : \"\"\"Convert Matplotlib Figure to FigureMpl content.\"\"\" return FigureMpl ( content ) content_adaptor_plotly ( content ) Convert Plotly Figure to FigurePlotly content. Source code in esparto/_adaptors.py @content_adaptor . register ( PlotlyFigure ) def content_adaptor_plotly ( content : PlotlyFigure ) -> FigurePlotly : \"\"\"Convert Plotly Figure to FigurePlotly content.\"\"\" return FigurePlotly ( content )","title":"Adaptors"},{"location":"03-api-reference/adaptors/#esparto_adaptors","text":"Info The content_adaptor function is called internally when an explicit Content class is not provided. Objects are matched to a suitable Content class through single dispatch . import esparto as es # Text automatically converted to Markdown content. page = es . Page ( title = \"New Page\" ) page [ \"New Section\" ] = \"Example _markdown_ text.\" page . tree () {'New Page': [{'New Section': [{'Row 0': [{'Column 0': ['Markdown']}]}]}]}","title":"esparto._adaptors"},{"location":"03-api-reference/adaptors/#esparto._adaptors","text":"","title":"_adaptors"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor","text":"Wrap content in the required class. Parameters: Name Type Description Default content Content Any content to be added to the document. required Returns: Type Description Content Content: Approriately wrapped content. Source code in esparto/_adaptors.py @singledispatch def content_adaptor ( content : Content ) -> Content : \"\"\" Wrap content in the required class. Args: content (Any): Any content to be added to the document. Returns: Content: Approriately wrapped content. \"\"\" if not issubclass ( type ( content ), Content ): raise TypeError ( f \"Unsupported content type: { type ( content ) } \" ) return content","title":"content_adaptor()"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor_bokeh","text":"Convert Bokeh Layout to FigureBokeh content. Source code in esparto/_adaptors.py @content_adaptor . register ( BokehObject ) def content_adaptor_bokeh ( content : BokehObject ) -> FigureBokeh : \"\"\"Convert Bokeh Layout to FigureBokeh content.\"\"\" return FigureBokeh ( content )","title":"content_adaptor_bokeh()"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor_core","text":"Convert markdown or image to Markdown or Image content. Source code in esparto/_adaptors.py @content_adaptor . register ( str ) def content_adaptor_core ( content : str ) -> Content : \"\"\"Convert markdown or image to Markdown or Image content.\"\"\" guess = guess_type ( content ) if guess and \"image\" in str ( guess [ 0 ]): return Image ( content ) return Markdown ( content )","title":"content_adaptor_core()"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor_df","text":"Convert Pandas DataFrame to DataFramePD content. Source code in esparto/_adaptors.py @content_adaptor . register ( DataFrame ) def content_adaptor_df ( content : DataFrame ) -> DataFramePd : \"\"\"Convert Pandas DataFrame to DataFramePD content.\"\"\" return DataFramePd ( content )","title":"content_adaptor_df()"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor_mpl","text":"Convert Matplotlib Figure to FigureMpl content. Source code in esparto/_adaptors.py @content_adaptor . register ( Figure ) def content_adaptor_mpl ( content : Figure ) -> FigureMpl : \"\"\"Convert Matplotlib Figure to FigureMpl content.\"\"\" return FigureMpl ( content )","title":"content_adaptor_mpl()"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor_plotly","text":"Convert Plotly Figure to FigurePlotly content. Source code in esparto/_adaptors.py @content_adaptor . register ( PlotlyFigure ) def content_adaptor_plotly ( content : PlotlyFigure ) -> FigurePlotly : \"\"\"Convert Plotly Figure to FigurePlotly content.\"\"\" return FigurePlotly ( content )","title":"content_adaptor_plotly()"},{"location":"03-api-reference/content/","text":"esparto._content Info Content classes will usually be inferred from the content object type. They may be accessed via the top level module if required. import esparto as es # Create some new Markdown text markdown = es . Markdown ( \"Example _markdown_ text.\" ) Content Template for Content elements. All Content classes come with these methods and attributes. Attributes: Name Type Description content Any Item to be included in the page - should match the encompassing Content class. display ( self ) Display rendered content in a Jupyter Notebook cell. Source code in esparto/_content.py def display ( self ) -> None : \"\"\"Display rendered content in a Jupyter Notebook cell.\"\"\" nb_display ( self ) to_html ( self , ** kwargs ) Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py @abstractmethod def to_html ( self , ** kwargs ) -> str : \"\"\"Convert content to HTML code. Returns: str: HTML code. \"\"\" raise NotImplementedError Markdown Markdown text content. Parameters: Name Type Description Default text str Markdown text to be added to document. required to_html ( self , ** kwargs ) Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ) -> str : html = md . markdown ( self . content ) html = f \" { html } \\n \" html = f \"<div class='px-1'> \\n { html } \\n </div>\" return html Image Image content. Can be read from a filepath, PIL.Image object, or from bytes. Only one of scale , set_width , or set_height should be used. If more than one is populated, the values will be prioritised in the order: set_width -> set_height -> scale Parameters: Name Type Description Default image str, PIL.Image, BytesIO Image data. required caption str Image caption (default = None) required alt_text str Alternative text. (default = None) required scale float Scale image proportionately, must be > 0 and <= 1. (default = None) required set_width int Set width in pixels. (default = None) required set_height int Set height in pixels. (default = None) required rescale ( self , scale ) Rescale the image proportionately prior to rendering. Note: Images can be scaled down only. Parameters: Name Type Description Default scale float Scaling ratio. required Source code in esparto/_content.py def rescale ( self , scale ) -> None : \"\"\"Rescale the image proportionately prior to rendering. Note: Images can be scaled down only. Args: scale (float): Scaling ratio. \"\"\" self . _scale = scale set_height ( self , height ) Set height of image prior to rendering. Parameters: Name Type Description Default height int New height in pixels. required Source code in esparto/_content.py def set_height ( self , height ) -> None : \"\"\"Set height of image prior to rendering. Args: height (int): New height in pixels. \"\"\" self . _height = height set_width ( self , width ) Set width of image prior to rendering. Parameters: Name Type Description Default width int New width in pixels. required Source code in esparto/_content.py def set_width ( self , width ) -> None : \"\"\"Set width of image prior to rendering. Args: width (int): New width in pixels. \"\"\" self . _width = width to_html ( self , ** kwargs ) Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ) -> str : if isinstance ( self . content , PILImage ): image = self . content else : image = Img . open ( self . content ) if self . _width or self . _height or self . _scale : image = _rescale_image ( image , self . _width , self . _height , self . _scale ) image_encoded = _image_to_base64 ( image ) html = ( \"<figure class='text-center p-3'>\" + \"<img class='img-fluid figure-img rounded' \" + f \"alt=' { self . alt_text } ' \" + f \"src='data:image/png;base64, { image_encoded } ' \" + \">\" ) if self . caption : html += f \"<figcaption class='figure-caption'> { self . caption } </figcaption>\" html += \"</figure>\" return html DataFramePd Pandas DataFrame to be converted to table. Parameters: Name Type Description Default df pd.DataFrame A Pandas DataFrame required index bool If True, render the DataFrame index. (default = False) required col_space str, int Minimum column width in CSS units. Use int for pixels. (default = 0) required to_html ( self , ** kwargs ) Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ) -> str : classes = \"table table-sm table-striped table-hover table-bordered my-1\" html = self . content . to_html ( index = self . index , border = 0 , col_space = self . col_space , classes = classes ) html = f \"<div class='table-responsive'> { html } </div>\" return html FigureMpl Matplotlib figure. Parameters: Name Type Description Default figure plt.Figure A Matplotlib figure. required width int Width in pixels. (default = '100%') required height int Height in pixels. (default = 'auto') required output_format str One of 'svg', 'png', or 'esparto.options'. (default = 'esparto.options') required to_html ( self , ** kwargs ) Convert content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ): if kwargs . get ( \"notebook_mode\" ): output_format = options . matplotlib_notebook_format elif self . output_format == \"esparto.options\" : output_format = options . matplotlib_output_format else : output_format = self . output_format if output_format == \"svg\" : buffer = StringIO () self . content . savefig ( buffer , format = \"svg\" ) buffer . seek ( 0 ) xml = buffer . read () if kwargs . get ( \"pdf_mode\" ): width , height = self . content . get_size_inches () * 96 xml = responsive_svg_mpl ( xml , width = int ( width ), height = int ( height )) temp_file = Path ( options . pdf_temp_dir ) / f \" { uuid4 () } .svg\" temp_file . write_text ( xml ) inner = ( \"<object type='image/svg+xml' width='100%' height='100%' \" f \"data=' { temp_file . name } '></object> \\n \" ) else : xml = responsive_svg_mpl ( xml ) inner = xml html = ( f \"<div class='svg-container-mpl' style='max-width: { self . width } ; height: { self . height } ;'> \\n \" + f \" { inner } \\n </div> \\n \" ) return html # If not svg: buffer = BytesIO () self . content . savefig ( buffer , format = \"png\" ) buffer . seek ( 0 ) return Image ( buffer ) . to_html () FigureBokeh Bokeh object to be rendered as an interactive plot. Parameters: Name Type Description Default figure bokeh.layouts.LayoutDOM A Bokeh object. required width int Width in pixels. (default = figure.width or '100%') required height int Height in pixels. (default = figure.height or 'auto') required to_html ( self , ** kwargs ) Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ) -> str : # Bokeh to PDF is experimental and untested if kwargs . get ( \"pdf_mode\" ): # pragma: no cover from bokeh.io import export_svg # type: ignore temp_file = Path ( options . pdf_temp_dir ) / f \" { uuid4 () } .svg\" export_svg ( self . content , filename = str ( temp_file )) html = f \"<img src=' { temp_file . name } ' width='100%' height='auto'> \\n \" return html html , js = components ( self . content ) # Remove outer <div> tag so we can give our own attributes html = _remove_outer_div ( html ) return f \"<div class='mb-3' style='max-width: { self . width } ; height: { self . height } ;'> { html } \\n { js } \\n </div>\" FigurePlotly Plotly figure to be rendered as an interactive plot. Parameters: Name Type Description Default figure plotly.graph_objs._figure.Figure A Plotly figure. required width int Width in pixels. (default = '100%') required height int Height in pixels. (default = 500) required to_html ( self , ** kwargs ) Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ) -> str : if kwargs . get ( \"pdf_mode\" ): temp_file = Path ( options . pdf_temp_dir ) / f \" { uuid4 () } .svg\" self . content . write_image ( str ( temp_file )) html = f \"<img src=' { temp_file . name } ' width='100%' height='auto'> \\n \" else : html = plotly_to_html ( self . content , include_plotlyjs = False , full_html = False ) # Remove outer <div> tag so we can give our own attributes. html = _remove_outer_div ( html ) html = ( \"<div class='responsive-plot mb-3' \" + f \"style='max-width: { self . width } ; height: { self . height } ;'> { html } \\n </div>\" ) return html","title":"Content"},{"location":"03-api-reference/content/#esparto_content","text":"Info Content classes will usually be inferred from the content object type. They may be accessed via the top level module if required. import esparto as es # Create some new Markdown text markdown = es . Markdown ( \"Example _markdown_ text.\" )","title":"esparto._content"},{"location":"03-api-reference/content/#esparto._content.Content","text":"Template for Content elements. All Content classes come with these methods and attributes. Attributes: Name Type Description content Any Item to be included in the page - should match the encompassing Content class.","title":"Content"},{"location":"03-api-reference/content/#esparto._content.Content.display","text":"Display rendered content in a Jupyter Notebook cell. Source code in esparto/_content.py def display ( self ) -> None : \"\"\"Display rendered content in a Jupyter Notebook cell.\"\"\" nb_display ( self )","title":"display()"},{"location":"03-api-reference/content/#esparto._content.Content.to_html","text":"Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py @abstractmethod def to_html ( self , ** kwargs ) -> str : \"\"\"Convert content to HTML code. Returns: str: HTML code. \"\"\" raise NotImplementedError","title":"to_html()"},{"location":"03-api-reference/content/#esparto._content.Markdown","text":"Markdown text content. Parameters: Name Type Description Default text str Markdown text to be added to document. required","title":"Markdown"},{"location":"03-api-reference/content/#esparto._content.Markdown.to_html","text":"Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ) -> str : html = md . markdown ( self . content ) html = f \" { html } \\n \" html = f \"<div class='px-1'> \\n { html } \\n </div>\" return html","title":"to_html()"},{"location":"03-api-reference/content/#esparto._content.Image","text":"Image content. Can be read from a filepath, PIL.Image object, or from bytes. Only one of scale , set_width , or set_height should be used. If more than one is populated, the values will be prioritised in the order: set_width -> set_height -> scale Parameters: Name Type Description Default image str, PIL.Image, BytesIO Image data. required caption str Image caption (default = None) required alt_text str Alternative text. (default = None) required scale float Scale image proportionately, must be > 0 and <= 1. (default = None) required set_width int Set width in pixels. (default = None) required set_height int Set height in pixels. (default = None) required","title":"Image"},{"location":"03-api-reference/content/#esparto._content.Image.rescale","text":"Rescale the image proportionately prior to rendering. Note: Images can be scaled down only. Parameters: Name Type Description Default scale float Scaling ratio. required Source code in esparto/_content.py def rescale ( self , scale ) -> None : \"\"\"Rescale the image proportionately prior to rendering. Note: Images can be scaled down only. Args: scale (float): Scaling ratio. \"\"\" self . _scale = scale","title":"rescale()"},{"location":"03-api-reference/content/#esparto._content.Image.set_height","text":"Set height of image prior to rendering. Parameters: Name Type Description Default height int New height in pixels. required Source code in esparto/_content.py def set_height ( self , height ) -> None : \"\"\"Set height of image prior to rendering. Args: height (int): New height in pixels. \"\"\" self . _height = height","title":"set_height()"},{"location":"03-api-reference/content/#esparto._content.Image.set_width","text":"Set width of image prior to rendering. Parameters: Name Type Description Default width int New width in pixels. required Source code in esparto/_content.py def set_width ( self , width ) -> None : \"\"\"Set width of image prior to rendering. Args: width (int): New width in pixels. \"\"\" self . _width = width","title":"set_width()"},{"location":"03-api-reference/content/#esparto._content.Image.to_html","text":"Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ) -> str : if isinstance ( self . content , PILImage ): image = self . content else : image = Img . open ( self . content ) if self . _width or self . _height or self . _scale : image = _rescale_image ( image , self . _width , self . _height , self . _scale ) image_encoded = _image_to_base64 ( image ) html = ( \"<figure class='text-center p-3'>\" + \"<img class='img-fluid figure-img rounded' \" + f \"alt=' { self . alt_text } ' \" + f \"src='data:image/png;base64, { image_encoded } ' \" + \">\" ) if self . caption : html += f \"<figcaption class='figure-caption'> { self . caption } </figcaption>\" html += \"</figure>\" return html","title":"to_html()"},{"location":"03-api-reference/content/#esparto._content.DataFramePd","text":"Pandas DataFrame to be converted to table. Parameters: Name Type Description Default df pd.DataFrame A Pandas DataFrame required index bool If True, render the DataFrame index. (default = False) required col_space str, int Minimum column width in CSS units. Use int for pixels. (default = 0) required","title":"DataFramePd"},{"location":"03-api-reference/content/#esparto._content.DataFramePd.to_html","text":"Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ) -> str : classes = \"table table-sm table-striped table-hover table-bordered my-1\" html = self . content . to_html ( index = self . index , border = 0 , col_space = self . col_space , classes = classes ) html = f \"<div class='table-responsive'> { html } </div>\" return html","title":"to_html()"},{"location":"03-api-reference/content/#esparto._content.FigureMpl","text":"Matplotlib figure. Parameters: Name Type Description Default figure plt.Figure A Matplotlib figure. required width int Width in pixels. (default = '100%') required height int Height in pixels. (default = 'auto') required output_format str One of 'svg', 'png', or 'esparto.options'. (default = 'esparto.options') required","title":"FigureMpl"},{"location":"03-api-reference/content/#esparto._content.FigureMpl.to_html","text":"Convert content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ): if kwargs . get ( \"notebook_mode\" ): output_format = options . matplotlib_notebook_format elif self . output_format == \"esparto.options\" : output_format = options . matplotlib_output_format else : output_format = self . output_format if output_format == \"svg\" : buffer = StringIO () self . content . savefig ( buffer , format = \"svg\" ) buffer . seek ( 0 ) xml = buffer . read () if kwargs . get ( \"pdf_mode\" ): width , height = self . content . get_size_inches () * 96 xml = responsive_svg_mpl ( xml , width = int ( width ), height = int ( height )) temp_file = Path ( options . pdf_temp_dir ) / f \" { uuid4 () } .svg\" temp_file . write_text ( xml ) inner = ( \"<object type='image/svg+xml' width='100%' height='100%' \" f \"data=' { temp_file . name } '></object> \\n \" ) else : xml = responsive_svg_mpl ( xml ) inner = xml html = ( f \"<div class='svg-container-mpl' style='max-width: { self . width } ; height: { self . height } ;'> \\n \" + f \" { inner } \\n </div> \\n \" ) return html # If not svg: buffer = BytesIO () self . content . savefig ( buffer , format = \"png\" ) buffer . seek ( 0 ) return Image ( buffer ) . to_html ()","title":"to_html()"},{"location":"03-api-reference/content/#esparto._content.FigureBokeh","text":"Bokeh object to be rendered as an interactive plot. Parameters: Name Type Description Default figure bokeh.layouts.LayoutDOM A Bokeh object. required width int Width in pixels. (default = figure.width or '100%') required height int Height in pixels. (default = figure.height or 'auto') required","title":"FigureBokeh"},{"location":"03-api-reference/content/#esparto._content.FigureBokeh.to_html","text":"Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ) -> str : # Bokeh to PDF is experimental and untested if kwargs . get ( \"pdf_mode\" ): # pragma: no cover from bokeh.io import export_svg # type: ignore temp_file = Path ( options . pdf_temp_dir ) / f \" { uuid4 () } .svg\" export_svg ( self . content , filename = str ( temp_file )) html = f \"<img src=' { temp_file . name } ' width='100%' height='auto'> \\n \" return html html , js = components ( self . content ) # Remove outer <div> tag so we can give our own attributes html = _remove_outer_div ( html ) return f \"<div class='mb-3' style='max-width: { self . width } ; height: { self . height } ;'> { html } \\n { js } \\n </div>\"","title":"to_html()"},{"location":"03-api-reference/content/#esparto._content.FigurePlotly","text":"Plotly figure to be rendered as an interactive plot. Parameters: Name Type Description Default figure plotly.graph_objs._figure.Figure A Plotly figure. required width int Width in pixels. (default = '100%') required height int Height in pixels. (default = 500) required","title":"FigurePlotly"},{"location":"03-api-reference/content/#esparto._content.FigurePlotly.to_html","text":"Convert content to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_content.py def to_html ( self , ** kwargs ) -> str : if kwargs . get ( \"pdf_mode\" ): temp_file = Path ( options . pdf_temp_dir ) / f \" { uuid4 () } .svg\" self . content . write_image ( str ( temp_file )) html = f \"<img src=' { temp_file . name } ' width='100%' height='auto'> \\n \" else : html = plotly_to_html ( self . content , include_plotlyjs = False , full_html = False ) # Remove outer <div> tag so we can give our own attributes. html = _remove_outer_div ( html ) html = ( \"<div class='responsive-plot mb-3' \" + f \"style='max-width: { self . width } ; height: { self . height } ;'> { html } \\n </div>\" ) return html","title":"to_html()"},{"location":"03-api-reference/layout/","text":"esparto._layout Info Layout classes are accessed from the top level module. import esparto as es # Create a new Page page = es . Page () Layout Template for Layout elements. All Layout classes come with these methods and attributes. Layout class hierarchy: Page -> Section -> Row -> Column -> Content Attributes: Name Type Description title str Object title. Used as a title within the document and as a key value. children list Child items defining the document layout and content. display ( self ) Display rendered document in a Notebook environment. Source code in esparto/_layout.py def display ( self ) -> None : \"\"\"Display rendered document in a Notebook environment.\"\"\" nb_display ( self ) set_children ( self , other ) Set children as other. Source code in esparto/_layout.py def set_children ( self , other : Union [ \"Layout\" , \"Content\" , Any ]): \"\"\"Set children as other.\"\"\" other = copy . copy ( other ) self . children = [ * self . _smart_wrap ( other )] to_html ( self , ** kwargs ) Convert document to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_layout.py def to_html ( self , ** kwargs ) -> str : \"\"\"Convert document to HTML code. Returns: str: HTML code. \"\"\" children_rendered = \" \" . join ([ c . to_html ( ** kwargs ) for c in self . children ]) title_rendered = self . _title_tags . format ( self . title ) if self . title else \"\" html = self . _body_tags . format ( f \" { title_rendered } \\n { children_rendered } \\n \" ) return html tree ( self ) Display document tree. Source code in esparto/_layout.py def tree ( self ) -> None : \"\"\"Display document tree.\"\"\" print ( self . _tree ()) Page Defines the top level of a document. Parameters: Name Type Description Default title str Used as a title within the document and as a key value. required navbrand str Brand name. Displayed in the page navbar if provided. required children list Child items defining layout and content. required save ( self , filepath = './esparto-doc.html' , return_html = False , dependency_source = 'esparto.options' ) Save document to HTML file. Note: Alias for self.save_html() . Parameters: Name Type Description Default filepath str Destination filepath. './esparto-doc.html' return_html bool If True, return HTML as a string. False dependency_source str One of 'cdn', 'inline', or 'esparto.options'. 'esparto.options' Returns: Type Description Optional[str] Document rendered as HTML. (If return_html is True) Source code in esparto/_layout.py def save ( self , filepath : str = \"./esparto-doc.html\" , return_html : bool = False , dependency_source = \"esparto.options\" , ) -> Optional [ str ]: \"\"\" Save document to HTML file. Note: Alias for `self.save_html()`. Args: filepath (str): Destination filepath. return_html (bool): If True, return HTML as a string. dependency_source (str): One of 'cdn', 'inline', or 'esparto.options'. Returns: Document rendered as HTML. (If `return_html` is True) \"\"\" html = self . save_html ( filepath = filepath , return_html = return_html , dependency_source = dependency_source , ) if return_html : return html return None save_html ( self , filepath = './esparto-doc.html' , return_html = False , dependency_source = 'esparto.options' ) Save document to HTML file. Parameters: Name Type Description Default filepath str Destination filepath. './esparto-doc.html' return_html bool If True, return HTML as a string. False dependency_source str One of 'cdn', 'inline', or 'esparto.options'. 'esparto.options' Returns: Type Description Optional[str] Document rendered as HTML. (If return_html is True) Source code in esparto/_layout.py def save_html ( self , filepath : str = \"./esparto-doc.html\" , return_html : bool = False , dependency_source = \"esparto.options\" , ) -> Optional [ str ]: \"\"\" Save document to HTML file. Args: filepath (str): Destination filepath. return_html (bool): If True, return HTML as a string. dependency_source (str): One of 'cdn', 'inline', or 'esparto.options'. Returns: Document rendered as HTML. (If `return_html` is True) \"\"\" html = publish_html ( self , filepath = filepath , return_html = return_html , dependency_source = dependency_source , ) if return_html : return html return None save_pdf ( self , filepath = './esparto-doc.pdf' , return_html = False ) Save document to PDF file. Note: Requires optional module weasyprint . Parameters: Name Type Description Default filepath str Destination filepath. './esparto-doc.pdf' return_html bool If True, return intermediate HTML representation as a string. False Returns: Type Description Optional[str] Document rendered as HTML. (If return_html is True) Source code in esparto/_layout.py def save_pdf ( self , filepath : str = \"./esparto-doc.pdf\" , return_html : bool = False ) -> Optional [ str ]: \"\"\" Save document to PDF file. Note: Requires optional module `weasyprint`. Args: filepath (str): Destination filepath. return_html (bool): If True, return intermediate HTML representation as a string. Returns: Document rendered as HTML. (If `return_html` is True) \"\"\" html = publish_pdf ( self , filepath , return_html = return_html ) if return_html : return html return None Section Sections define thematically distinct groups of content within a Page. Parameters: Name Type Description Default title str Used as a title within the document and as a key value. required children list Child items defining layout and content. required Row Rows are used in combination with Columns to define the grid layout within a section. Parameters: Name Type Description Default title str Used as a title within the document and as a key value. required children list Child items defining layout and content. required Column Columns sit within Rows and act as content holders. Parameters: Name Type Description Default title str Used as a title within the document and as a key value. required children list Child items defining layout and content. required","title":"Layout"},{"location":"03-api-reference/layout/#esparto_layout","text":"Info Layout classes are accessed from the top level module. import esparto as es # Create a new Page page = es . Page ()","title":"esparto._layout"},{"location":"03-api-reference/layout/#esparto._layout.Layout","text":"Template for Layout elements. All Layout classes come with these methods and attributes. Layout class hierarchy: Page -> Section -> Row -> Column -> Content Attributes: Name Type Description title str Object title. Used as a title within the document and as a key value. children list Child items defining the document layout and content.","title":"Layout"},{"location":"03-api-reference/layout/#esparto._layout.Layout.display","text":"Display rendered document in a Notebook environment. Source code in esparto/_layout.py def display ( self ) -> None : \"\"\"Display rendered document in a Notebook environment.\"\"\" nb_display ( self )","title":"display()"},{"location":"03-api-reference/layout/#esparto._layout.Layout.set_children","text":"Set children as other. Source code in esparto/_layout.py def set_children ( self , other : Union [ \"Layout\" , \"Content\" , Any ]): \"\"\"Set children as other.\"\"\" other = copy . copy ( other ) self . children = [ * self . _smart_wrap ( other )]","title":"set_children()"},{"location":"03-api-reference/layout/#esparto._layout.Layout.to_html","text":"Convert document to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_layout.py def to_html ( self , ** kwargs ) -> str : \"\"\"Convert document to HTML code. Returns: str: HTML code. \"\"\" children_rendered = \" \" . join ([ c . to_html ( ** kwargs ) for c in self . children ]) title_rendered = self . _title_tags . format ( self . title ) if self . title else \"\" html = self . _body_tags . format ( f \" { title_rendered } \\n { children_rendered } \\n \" ) return html","title":"to_html()"},{"location":"03-api-reference/layout/#esparto._layout.Layout.tree","text":"Display document tree. Source code in esparto/_layout.py def tree ( self ) -> None : \"\"\"Display document tree.\"\"\" print ( self . _tree ())","title":"tree()"},{"location":"03-api-reference/layout/#esparto._layout.Page","text":"Defines the top level of a document. Parameters: Name Type Description Default title str Used as a title within the document and as a key value. required navbrand str Brand name. Displayed in the page navbar if provided. required children list Child items defining layout and content. required","title":"Page"},{"location":"03-api-reference/layout/#esparto._layout.Page.save","text":"Save document to HTML file. Note: Alias for self.save_html() . Parameters: Name Type Description Default filepath str Destination filepath. './esparto-doc.html' return_html bool If True, return HTML as a string. False dependency_source str One of 'cdn', 'inline', or 'esparto.options'. 'esparto.options' Returns: Type Description Optional[str] Document rendered as HTML. (If return_html is True) Source code in esparto/_layout.py def save ( self , filepath : str = \"./esparto-doc.html\" , return_html : bool = False , dependency_source = \"esparto.options\" , ) -> Optional [ str ]: \"\"\" Save document to HTML file. Note: Alias for `self.save_html()`. Args: filepath (str): Destination filepath. return_html (bool): If True, return HTML as a string. dependency_source (str): One of 'cdn', 'inline', or 'esparto.options'. Returns: Document rendered as HTML. (If `return_html` is True) \"\"\" html = self . save_html ( filepath = filepath , return_html = return_html , dependency_source = dependency_source , ) if return_html : return html return None","title":"save()"},{"location":"03-api-reference/layout/#esparto._layout.Page.save_html","text":"Save document to HTML file. Parameters: Name Type Description Default filepath str Destination filepath. './esparto-doc.html' return_html bool If True, return HTML as a string. False dependency_source str One of 'cdn', 'inline', or 'esparto.options'. 'esparto.options' Returns: Type Description Optional[str] Document rendered as HTML. (If return_html is True) Source code in esparto/_layout.py def save_html ( self , filepath : str = \"./esparto-doc.html\" , return_html : bool = False , dependency_source = \"esparto.options\" , ) -> Optional [ str ]: \"\"\" Save document to HTML file. Args: filepath (str): Destination filepath. return_html (bool): If True, return HTML as a string. dependency_source (str): One of 'cdn', 'inline', or 'esparto.options'. Returns: Document rendered as HTML. (If `return_html` is True) \"\"\" html = publish_html ( self , filepath = filepath , return_html = return_html , dependency_source = dependency_source , ) if return_html : return html return None","title":"save_html()"},{"location":"03-api-reference/layout/#esparto._layout.Page.save_pdf","text":"Save document to PDF file. Note: Requires optional module weasyprint . Parameters: Name Type Description Default filepath str Destination filepath. './esparto-doc.pdf' return_html bool If True, return intermediate HTML representation as a string. False Returns: Type Description Optional[str] Document rendered as HTML. (If return_html is True) Source code in esparto/_layout.py def save_pdf ( self , filepath : str = \"./esparto-doc.pdf\" , return_html : bool = False ) -> Optional [ str ]: \"\"\" Save document to PDF file. Note: Requires optional module `weasyprint`. Args: filepath (str): Destination filepath. return_html (bool): If True, return intermediate HTML representation as a string. Returns: Document rendered as HTML. (If `return_html` is True) \"\"\" html = publish_pdf ( self , filepath , return_html = return_html ) if return_html : return html return None","title":"save_pdf()"},{"location":"03-api-reference/layout/#esparto._layout.Section","text":"Sections define thematically distinct groups of content within a Page. Parameters: Name Type Description Default title str Used as a title within the document and as a key value. required children list Child items defining layout and content. required","title":"Section"},{"location":"03-api-reference/layout/#esparto._layout.Row","text":"Rows are used in combination with Columns to define the grid layout within a section. Parameters: Name Type Description Default title str Used as a title within the document and as a key value. required children list Child items defining layout and content. required","title":"Row"},{"location":"03-api-reference/layout/#esparto._layout.Column","text":"Columns sit within Rows and act as content holders. Parameters: Name Type Description Default title str Used as a title within the document and as a key value. required children list Child items defining layout and content. required","title":"Column"},{"location":"03-api-reference/publish/","text":"esparto._publish Info Publishing methods are accessed via Layout classes. import esparto as es # Create a new Page page = es . Page ( title = \"My New Page\" ) # Publish the document to an HTML file: page . save_html ( \"my-page.html\" ) # Or as a PDF: page . save_pdf ( \"my-page.pdf\" ) publish_html ( document , filepath = './esparto-doc.html' , return_html = False , dependency_source = 'esparto.options' , ** kwargs ) Save document to HTML. Parameters: Name Type Description Default document Page A Page object. required filepath Optional[str] Filepath to write to. './esparto-doc.html' return_html bool Returns HTML string if True. False dependency_source str One of 'cdn', 'inline', or 'esparto.options'. 'esparto.options' **kwargs Dict[str, Any] Arguments passed to document.to_html() . {} Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def publish_html ( document : \"Page\" , filepath : Optional [ str ] = \"./esparto-doc.html\" , return_html : bool = False , dependency_source = \"esparto.options\" , ** kwargs , ) -> Optional [ str ]: \"\"\"Save document to HTML. Args: document (Page): A Page object. filepath (str): Filepath to write to. return_html (bool): Returns HTML string if True. dependency_source (str): One of 'cdn', 'inline', or 'esparto.options'. **kwargs (Dict[str, Any]): Arguments passed to `document.to_html()`. Returns: str: HTML string if return_html is True. \"\"\" required_deps = document . _required_dependencies () dependency_source = get_source_from_options ( dependency_source ) resolved_deps = resolve_deps ( required_deps , source = dependency_source ) html_rendered : str = _BASE_TEMPLATE . render ( org_name = document . org_name , doc_title = document . title , content = document . to_html ( ** kwargs ), head_deps = resolved_deps . head , tail_deps = resolved_deps . tail , ) html_prettified = _prettify_html ( html_rendered ) if filepath : with open ( filepath , \"w\" ) as f : f . write ( html_prettified ) if return_html : return html_prettified return None publish_pdf ( document , filepath = './esparto-doc.pdf' , return_html = False ) Save document to PDF. Parameters: Name Type Description Default document Page A Page object. required filepath str Filepath to write to. './esparto-doc.pdf' return_html bool Returns HTML string if True. False Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def publish_pdf ( document : \"Page\" , filepath : str = \"./esparto-doc.pdf\" , return_html : bool = False ) -> Optional [ str ]: \"\"\"Save document to PDF. Args: document (Layout): A Page object. filepath (str): Filepath to write to. return_html (bool): Returns HTML string if True. Returns: str: HTML string if return_html is True. \"\"\" if \"weasyprint\" not in _INSTALLED_MODULES : raise ModuleNotFoundError ( \"Install weasyprint for PDF support\" ) import weasyprint as weasy # type: ignore temp_dir = Path ( options . pdf_temp_dir ) temp_dir . mkdir ( parents = True , exist_ok = True ) html_rendered = publish_html ( document = document , filepath = None , return_html = True , dependency_source = \"inline\" , pdf_mode = True , ) pdf_doc = weasy . HTML ( string = html_rendered , base_url = options . pdf_temp_dir ) . render () pdf_doc . metadata . title = document . title pdf_doc . write_pdf ( filepath ) for f in temp_dir . iterdir (): f . unlink () temp_dir . rmdir () html_prettified = _prettify_html ( html_rendered ) if return_html : return html_prettified return None nb_display ( item , return_html = False , dependency_source = 'esparto.options' ) Display Layout or Content to Jupyter Notebook cell. Parameters: Name Type Description Default item Union[Layout, Content] A Layout or Content item. required return_html bool Returns HTML string if True. False dependency_source str One of 'cdn', 'inline', or 'esparto.options'. 'esparto.options' Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def nb_display ( item : Union [ \"Layout\" , \"Content\" ], return_html : bool = False , dependency_source = \"esparto.options\" , ) -> Optional [ str ]: \"\"\"Display Layout or Content to Jupyter Notebook cell. Args: item (Layout, Content): A Layout or Content item. return_html (bool): Returns HTML string if True. dependency_source (str): One of 'cdn', 'inline', or 'esparto.options'. Returns: str: HTML string if return_html is True. \"\"\" from IPython.display import HTML , Javascript , display # type: ignore from esparto._layout import Layout if isinstance ( item , Layout ): required_deps = item . _required_dependencies () else : required_deps = getattr ( item , \"_dependencies\" , set ()) dependency_source = get_source_from_options ( dependency_source ) resolved_deps = resolve_deps ( required_deps , source = dependency_source ) head_deps = \" \\n \" . join ( resolved_deps . head ) tail_deps = \" \\n \" . join ( resolved_deps . tail ) html = item . to_html ( notebook_mode = True ) render_html = ( f \"<div class='container' style='width: 100%; height: 100%;'> \\n { html } \\n </div>\" ) render_html = ( f \"<!doctype html> \\n <html> \\n <head> { head_deps } </head> \\n \" f \"<body> \\n { render_html } \\n { tail_deps } \\n </body> \\n </html> \\n \" ) print () # This allows time to download plotly.js from the CDN - otherwise cell renders empty if \"plotly\" in required_deps and dependency_source == \"cdn\" : display ( HTML ( f \"<head> \\n { head_deps } \\n </head> \\n \" ), metadata = dict ( isolated = True )) time . sleep ( 2 ) display ( HTML ( render_html ), metadata = dict ( isolated = True )) print () # Prevent output scrolling js = \"$('.output_scroll').removeClass('output_scroll')\" display ( Javascript ( js )) if return_html : return render_html return None","title":"Publish"},{"location":"03-api-reference/publish/#esparto_publish","text":"Info Publishing methods are accessed via Layout classes. import esparto as es # Create a new Page page = es . Page ( title = \"My New Page\" ) # Publish the document to an HTML file: page . save_html ( \"my-page.html\" ) # Or as a PDF: page . save_pdf ( \"my-page.pdf\" )","title":"esparto._publish"},{"location":"03-api-reference/publish/#esparto._publish.publish_html","text":"Save document to HTML. Parameters: Name Type Description Default document Page A Page object. required filepath Optional[str] Filepath to write to. './esparto-doc.html' return_html bool Returns HTML string if True. False dependency_source str One of 'cdn', 'inline', or 'esparto.options'. 'esparto.options' **kwargs Dict[str, Any] Arguments passed to document.to_html() . {} Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def publish_html ( document : \"Page\" , filepath : Optional [ str ] = \"./esparto-doc.html\" , return_html : bool = False , dependency_source = \"esparto.options\" , ** kwargs , ) -> Optional [ str ]: \"\"\"Save document to HTML. Args: document (Page): A Page object. filepath (str): Filepath to write to. return_html (bool): Returns HTML string if True. dependency_source (str): One of 'cdn', 'inline', or 'esparto.options'. **kwargs (Dict[str, Any]): Arguments passed to `document.to_html()`. Returns: str: HTML string if return_html is True. \"\"\" required_deps = document . _required_dependencies () dependency_source = get_source_from_options ( dependency_source ) resolved_deps = resolve_deps ( required_deps , source = dependency_source ) html_rendered : str = _BASE_TEMPLATE . render ( org_name = document . org_name , doc_title = document . title , content = document . to_html ( ** kwargs ), head_deps = resolved_deps . head , tail_deps = resolved_deps . tail , ) html_prettified = _prettify_html ( html_rendered ) if filepath : with open ( filepath , \"w\" ) as f : f . write ( html_prettified ) if return_html : return html_prettified return None","title":"publish_html()"},{"location":"03-api-reference/publish/#esparto._publish.publish_pdf","text":"Save document to PDF. Parameters: Name Type Description Default document Page A Page object. required filepath str Filepath to write to. './esparto-doc.pdf' return_html bool Returns HTML string if True. False Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def publish_pdf ( document : \"Page\" , filepath : str = \"./esparto-doc.pdf\" , return_html : bool = False ) -> Optional [ str ]: \"\"\"Save document to PDF. Args: document (Layout): A Page object. filepath (str): Filepath to write to. return_html (bool): Returns HTML string if True. Returns: str: HTML string if return_html is True. \"\"\" if \"weasyprint\" not in _INSTALLED_MODULES : raise ModuleNotFoundError ( \"Install weasyprint for PDF support\" ) import weasyprint as weasy # type: ignore temp_dir = Path ( options . pdf_temp_dir ) temp_dir . mkdir ( parents = True , exist_ok = True ) html_rendered = publish_html ( document = document , filepath = None , return_html = True , dependency_source = \"inline\" , pdf_mode = True , ) pdf_doc = weasy . HTML ( string = html_rendered , base_url = options . pdf_temp_dir ) . render () pdf_doc . metadata . title = document . title pdf_doc . write_pdf ( filepath ) for f in temp_dir . iterdir (): f . unlink () temp_dir . rmdir () html_prettified = _prettify_html ( html_rendered ) if return_html : return html_prettified return None","title":"publish_pdf()"},{"location":"03-api-reference/publish/#esparto._publish.nb_display","text":"Display Layout or Content to Jupyter Notebook cell. Parameters: Name Type Description Default item Union[Layout, Content] A Layout or Content item. required return_html bool Returns HTML string if True. False dependency_source str One of 'cdn', 'inline', or 'esparto.options'. 'esparto.options' Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def nb_display ( item : Union [ \"Layout\" , \"Content\" ], return_html : bool = False , dependency_source = \"esparto.options\" , ) -> Optional [ str ]: \"\"\"Display Layout or Content to Jupyter Notebook cell. Args: item (Layout, Content): A Layout or Content item. return_html (bool): Returns HTML string if True. dependency_source (str): One of 'cdn', 'inline', or 'esparto.options'. Returns: str: HTML string if return_html is True. \"\"\" from IPython.display import HTML , Javascript , display # type: ignore from esparto._layout import Layout if isinstance ( item , Layout ): required_deps = item . _required_dependencies () else : required_deps = getattr ( item , \"_dependencies\" , set ()) dependency_source = get_source_from_options ( dependency_source ) resolved_deps = resolve_deps ( required_deps , source = dependency_source ) head_deps = \" \\n \" . join ( resolved_deps . head ) tail_deps = \" \\n \" . join ( resolved_deps . tail ) html = item . to_html ( notebook_mode = True ) render_html = ( f \"<div class='container' style='width: 100%; height: 100%;'> \\n { html } \\n </div>\" ) render_html = ( f \"<!doctype html> \\n <html> \\n <head> { head_deps } </head> \\n \" f \"<body> \\n { render_html } \\n { tail_deps } \\n </body> \\n </html> \\n \" ) print () # This allows time to download plotly.js from the CDN - otherwise cell renders empty if \"plotly\" in required_deps and dependency_source == \"cdn\" : display ( HTML ( f \"<head> \\n { head_deps } \\n </head> \\n \" ), metadata = dict ( isolated = True )) time . sleep ( 2 ) display ( HTML ( render_html ), metadata = dict ( isolated = True )) print () # Prevent output scrolling js = \"$('.output_scroll').removeClass('output_scroll')\" display ( Javascript ( js )) if return_html : return render_html return None","title":"nb_display()"},{"location":"04-about/authors/","text":"Credits Lead Developer Dominic Thorn dominic.thorn@gmail.com domvwt.github.io","title":"Authors"},{"location":"04-about/authors/#credits","text":"","title":"Credits"},{"location":"04-about/authors/#lead-developer","text":"Dominic Thorn dominic.thorn@gmail.com domvwt.github.io","title":"Lead Developer"},{"location":"04-about/contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report Bugs Report bugs at https://github.com/domvwt/esparto/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation esparto could always use more documentation, whether as part of the official esparto docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback The best way to send feedback is to file an issue at https://github.com/domvwt/esparto/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! Ready to contribute? Here's how to set up esparto for local development. Fork the esparto repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/esparto.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: $ mkvirtualenv esparto $ cd esparto/ $ python setup.py develop Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: $ make format lint mypy test $ make test-all To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.6, 3.7, 3.8, and 3.9. Check https://travis-ci.org/domvwt/esparto/pull_requests and make sure that the tests pass for all supported Python versions. Tips To run a subset of tests: $ pytest tests.test_esparto Deploying A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.rst). Then run: $ bump2version patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"04-about/contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"04-about/contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"04-about/contributing/#report-bugs","text":"Report bugs at https://github.com/domvwt/esparto/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"04-about/contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"04-about/contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"04-about/contributing/#write-documentation","text":"esparto could always use more documentation, whether as part of the official esparto docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"04-about/contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/domvwt/esparto/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"04-about/contributing/#get-started","text":"Ready to contribute? Here's how to set up esparto for local development. Fork the esparto repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/esparto.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: $ mkvirtualenv esparto $ cd esparto/ $ python setup.py develop Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: $ make format lint mypy test $ make test-all To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"04-about/contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.6, 3.7, 3.8, and 3.9. Check https://travis-ci.org/domvwt/esparto/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"04-about/contributing/#tips","text":"To run a subset of tests: $ pytest tests.test_esparto","title":"Tips"},{"location":"04-about/contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.rst). Then run: $ bump2version patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"04-about/license/","text":"MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Copyright (c) 2021 - Dominic Thorn","title":"License"},{"location":"04-about/license/#mit-license","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Copyright (c) 2021 - Dominic Thorn","title":"MIT License"},{"location":"04-about/release-notes/","text":"Release Notes 1.0.1 (2021-06-01) Update dependencies Fix SVG rendering in PDF Update docs and examples 1.0.0 (2021-05-31) Improve API. Responsive SVG plots. Update Jinja template to remove branding. Refactor codebase. 0.2.5 (2021-05-06) Fix linting errors. Add dataclasses dependency for Python < 3.7. 0.2.4 (2021-05-04) Fix bug corrupting document titles. Lazy load the content dependency dict. Remove unused code. 0.2.3 (2021-05-03) Make documents 'print friendly'. Output to PDF with weasyprint. Export matplotlib plots as SVG by default. Use esparto.options for configuring behaviour. 0.2.2 (2021-04-24) Fix notebook display for Colab. 0.2.1 (2021-04-24) Add Bootstrap dependencies for relevant content classes. Inherit FigureBokeh height from Bokeh object. Fix issues with in-notebook content rendering. 0.2.0 (2021-04-23) Add support for Bokeh and Plotly. 0.1.2 (2021-04-09) Relax dependency on Pillow to allow versions >=7.0.0 and <9.0.0. 0.1.1 (2021-04-08) Update package metadata for pypi. 0.1.0 (2021-04-07) First public release.","title":"Release Notes"},{"location":"04-about/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"04-about/release-notes/#101-2021-06-01","text":"Update dependencies Fix SVG rendering in PDF Update docs and examples","title":"1.0.1 (2021-06-01)"},{"location":"04-about/release-notes/#100-2021-05-31","text":"Improve API. Responsive SVG plots. Update Jinja template to remove branding. Refactor codebase.","title":"1.0.0 (2021-05-31)"},{"location":"04-about/release-notes/#025-2021-05-06","text":"Fix linting errors. Add dataclasses dependency for Python < 3.7.","title":"0.2.5 (2021-05-06)"},{"location":"04-about/release-notes/#024-2021-05-04","text":"Fix bug corrupting document titles. Lazy load the content dependency dict. Remove unused code.","title":"0.2.4 (2021-05-04)"},{"location":"04-about/release-notes/#023-2021-05-03","text":"Make documents 'print friendly'. Output to PDF with weasyprint. Export matplotlib plots as SVG by default. Use esparto.options for configuring behaviour.","title":"0.2.3 (2021-05-03)"},{"location":"04-about/release-notes/#022-2021-04-24","text":"Fix notebook display for Colab.","title":"0.2.2 (2021-04-24)"},{"location":"04-about/release-notes/#021-2021-04-24","text":"Add Bootstrap dependencies for relevant content classes. Inherit FigureBokeh height from Bokeh object. Fix issues with in-notebook content rendering.","title":"0.2.1 (2021-04-24)"},{"location":"04-about/release-notes/#020-2021-04-23","text":"Add support for Bokeh and Plotly.","title":"0.2.0 (2021-04-23)"},{"location":"04-about/release-notes/#012-2021-04-09","text":"Relax dependency on Pillow to allow versions >=7.0.0 and <9.0.0.","title":"0.1.2 (2021-04-09)"},{"location":"04-about/release-notes/#011-2021-04-08","text":"Update package metadata for pypi.","title":"0.1.1 (2021-04-08)"},{"location":"04-about/release-notes/#010-2021-04-07","text":"First public release.","title":"0.1.0 (2021-04-07)"},{"location":"04-about/roadmap/","text":"Potential features: Alternative themes Additional Bootstrap components User supplied Jinja templates Custom CSS","title":"Roadmap"}]}