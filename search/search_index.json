{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Esparto is a super minimal frontend web framework written in Python. Its primary use is for generating shareable single page documents with content from popular analytics and data science libraries. Overview The library provides a streamlined API that lets users define their page in terms of sections, rows, and columns; and an intelligent wrapping system that automatically converts Python objects into content. We use the grid system and components from Bootstrap to ensure documents adapt to the viewing device and appear immediately familiar and accessible. No knowledge of Bootstrap or web development is required to use the library, however, as these details are conveniently abstracted. At publishing time, the completed document is passed to Jinja2 and fed into an HTML template with all style details and dependencies captured inline. Esparto supports content rendering within Jupyter Notebooks, allowing users to interactively and iteratively build documents without disrupting their workflow. Features Lightweight API Jupyter Notebook support No CSS or HTML required Device responsive display Self contained / inline dependencies MIT License Supported Content Markdown text Images Matplotlib figures Pandas DataFrames Bokeh objects Plotly figures","title":"Introduction"},{"location":"#welcome","text":"Esparto is a super minimal frontend web framework written in Python. Its primary use is for generating shareable single page documents with content from popular analytics and data science libraries.","title":"Welcome"},{"location":"#overview","text":"The library provides a streamlined API that lets users define their page in terms of sections, rows, and columns; and an intelligent wrapping system that automatically converts Python objects into content. We use the grid system and components from Bootstrap to ensure documents adapt to the viewing device and appear immediately familiar and accessible. No knowledge of Bootstrap or web development is required to use the library, however, as these details are conveniently abstracted. At publishing time, the completed document is passed to Jinja2 and fed into an HTML template with all style details and dependencies captured inline. Esparto supports content rendering within Jupyter Notebooks, allowing users to interactively and iteratively build documents without disrupting their workflow.","title":"Overview"},{"location":"#features","text":"Lightweight API Jupyter Notebook support No CSS or HTML required Device responsive display Self contained / inline dependencies MIT License","title":"Features"},{"location":"#supported-content","text":"Markdown text Images Matplotlib figures Pandas DataFrames Bokeh objects Plotly figures","title":"Supported Content"},{"location":"01-getting-started/installation/","text":"Installation Stable release To install esparto, run this command in your terminal: $ pip install esparto This is the preferred method to install esparto, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From sources The esparto project uses Poetry to manage the virtual environment, dependencies, and build process. Sources for esparto can be downloaded from the Github repo . Clone the public repository from: $ git clone git://github.com/domvwt/esparto Once you have a copy of the source, navigate into the directory: $ cd esparto And install with: $ poetry install","title":"Installation"},{"location":"01-getting-started/installation/#installation","text":"","title":"Installation"},{"location":"01-getting-started/installation/#stable-release","text":"To install esparto, run this command in your terminal: $ pip install esparto This is the preferred method to install esparto, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"01-getting-started/installation/#from-sources","text":"The esparto project uses Poetry to manage the virtual environment, dependencies, and build process. Sources for esparto can be downloaded from the Github repo . Clone the public repository from: $ git clone git://github.com/domvwt/esparto Once you have a copy of the source, navigate into the directory: $ cd esparto And install with: $ poetry install","title":"From sources"},{"location":"01-getting-started/quickstart/","text":"Quickstart The esparto library can be installed with pip: pip install esparto Documents start with a Page object, to which user content can be added iteratively. Creating a page, adding basic content, and saving the file can be achieved in a few short lines: import esparto as es my_page = es . Page ( title = \"Esparto Quickstart\" ) content_md = \"\"\" Your *content* goes **here!** \"\"\" my_page += content_md my_page . save ( \"esparto-quick.html\" ) The rendered HTML document: To add an image, pass a filepath to the page: import esparto as es my_page = es . Page ( title = \"Esparto Quickstart\" ) content_md = \"\"\" Your *content* goes **here!** \"\"\" my_page += content_md my_page += \"image.jpg\" html = my_page . save ( \"esparto-quick-image.html\" ) Esparto determines that the string points to a valid image and loads the file: Please see the examples page for more.","title":"Quickstart"},{"location":"01-getting-started/quickstart/#quickstart","text":"The esparto library can be installed with pip: pip install esparto Documents start with a Page object, to which user content can be added iteratively. Creating a page, adding basic content, and saving the file can be achieved in a few short lines: import esparto as es my_page = es . Page ( title = \"Esparto Quickstart\" ) content_md = \"\"\" Your *content* goes **here!** \"\"\" my_page += content_md my_page . save ( \"esparto-quick.html\" ) The rendered HTML document: To add an image, pass a filepath to the page: import esparto as es my_page = es . Page ( title = \"Esparto Quickstart\" ) content_md = \"\"\" Your *content* goes **here!** \"\"\" my_page += content_md my_page += \"image.jpg\" html = my_page . save ( \"esparto-quick-image.html\" ) Esparto determines that the string points to a valid image and loads the file: Please see the examples page for more.","title":"Quickstart"},{"location":"02-user-guide/custom-content/","text":"Coming soon!","title":"Coming soon!"},{"location":"02-user-guide/custom-content/#coming-soon","text":"","title":"Coming soon!"},{"location":"02-user-guide/document-design/","text":"Coming soon!","title":"Coming soon!"},{"location":"02-user-guide/document-design/#coming-soon","text":"","title":"Coming soon!"},{"location":"02-user-guide/examples/","text":"Examples Data Analysis The iris dataset is one of the most well known datasets in statistics and data science. This example notebook shows how we can put together a simple data analysis report in esparto. This example covers: Text content with markdown formatting Including images from files Converting a Pandas DataFrame to a table Adding plots from Matplotlib and Seaborn Interactive Plotting The pandas-bokeh library offers convenient functions for producing interactive Bokeh plots with few lines of code. With the Plotly backend for Pandas we can access the Plotly Express API directly from the '.plot()' method of any DataFrame or Series. This notebook shows basic examples from each library: Interactive plotting with Bokeh and Plotly Adding interactive content to the page","title":"Examples"},{"location":"02-user-guide/examples/#examples","text":"","title":"Examples"},{"location":"02-user-guide/examples/#data-analysis","text":"The iris dataset is one of the most well known datasets in statistics and data science. This example notebook shows how we can put together a simple data analysis report in esparto. This example covers: Text content with markdown formatting Including images from files Converting a Pandas DataFrame to a table Adding plots from Matplotlib and Seaborn","title":"Data Analysis"},{"location":"02-user-guide/examples/#interactive-plotting","text":"The pandas-bokeh library offers convenient functions for producing interactive Bokeh plots with few lines of code. With the Plotly backend for Pandas we can access the Plotly Express API directly from the '.plot()' method of any DataFrame or Series. This notebook shows basic examples from each library: Interactive plotting with Bokeh and Plotly Adding interactive content to the page","title":"Interactive Plotting"},{"location":"03-api-reference/adaptors/","text":"esparto._adaptors Info The content_adaptor is called internally when an explicit Content class is not provided. Input objects are matched to a suitable Content class through single dispatch . import esparto as es # Text automatically converted to Markdown content. section = es . Section () section += \"Example _markdown_ text.\" print ( section ) {'Section': [{'Row': [{'Column': ['Markdown']}]}]} _adaptors private content_adaptor ( content ) Wrap content in the required class. Parameters: Name Type Description Default content Content Any content to be added to the document. required Returns: Type Description Content Content: Approriately wrapped content. Source code in esparto/_adaptors.py @singledispatch def content_adaptor ( content : Content ) -> Content : \"\"\" Wrap content in the required class. Args: content (Any): Any content to be added to the document. Returns: Content: Approriately wrapped content. \"\"\" if not issubclass ( type ( content ), Content ): raise TypeError ( f \"Unsupported content type: { type ( content ) } \" ) return content content_adaptor_bokeh_layout ( content ) Convert Bokeh Layout to FigureBokeh content. Source code in esparto/_adaptors.py @content_adaptor . register ( BokehObject ) def content_adaptor_bokeh_layout ( content : BokehObject ) -> FigureBokeh : \"\"\"Convert Bokeh Layout to FigureBokeh content.\"\"\" return FigureBokeh ( content ) content_adaptor_core ( content ) Convert markdown or image to Markdown or Image content. Source code in esparto/_adaptors.py @content_adaptor . register ( str ) def content_adaptor_core ( content : str ) -> Content : \"\"\"Convert markdown or image to Markdown or Image content.\"\"\" guess = guess_type ( content ) if guess and \"image\" in str ( guess [ 0 ]): return Image ( content ) return Markdown ( content ) content_adaptor_df ( content ) Convert Pandas DataFrame to DataFramePD content. Source code in esparto/_adaptors.py @content_adaptor . register ( DataFrame ) def content_adaptor_df ( content : DataFrame ) -> DataFramePd : \"\"\"Convert Pandas DataFrame to DataFramePD content.\"\"\" return DataFramePd ( content ) content_adaptor_fig ( content ) Convert Matplotlib Figure to FigureMpl content. Source code in esparto/_adaptors.py @content_adaptor . register ( Figure ) def content_adaptor_fig ( content : Figure ) -> FigureMpl : \"\"\"Convert Matplotlib Figure to FigureMpl content.\"\"\" return FigureMpl ( content ) content_adaptor_plotly ( content ) Convert Plotly Figure to FigurePlotly content. Source code in esparto/_adaptors.py @content_adaptor . register ( PlotlyFigure ) def content_adaptor_plotly ( content : PlotlyFigure ) -> FigurePlotly : \"\"\"Convert Plotly Figure to FigurePlotly content.\"\"\" return FigurePlotly ( content )","title":"Adaptors"},{"location":"03-api-reference/adaptors/#esparto_adaptors","text":"Info The content_adaptor is called internally when an explicit Content class is not provided. Input objects are matched to a suitable Content class through single dispatch . import esparto as es # Text automatically converted to Markdown content. section = es . Section () section += \"Example _markdown_ text.\" print ( section ) {'Section': [{'Row': [{'Column': ['Markdown']}]}]}","title":"esparto._adaptors"},{"location":"03-api-reference/adaptors/#esparto._adaptors","text":"","title":"_adaptors"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor","text":"Wrap content in the required class. Parameters: Name Type Description Default content Content Any content to be added to the document. required Returns: Type Description Content Content: Approriately wrapped content. Source code in esparto/_adaptors.py @singledispatch def content_adaptor ( content : Content ) -> Content : \"\"\" Wrap content in the required class. Args: content (Any): Any content to be added to the document. Returns: Content: Approriately wrapped content. \"\"\" if not issubclass ( type ( content ), Content ): raise TypeError ( f \"Unsupported content type: { type ( content ) } \" ) return content","title":"content_adaptor()"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor_bokeh_layout","text":"Convert Bokeh Layout to FigureBokeh content. Source code in esparto/_adaptors.py @content_adaptor . register ( BokehObject ) def content_adaptor_bokeh_layout ( content : BokehObject ) -> FigureBokeh : \"\"\"Convert Bokeh Layout to FigureBokeh content.\"\"\" return FigureBokeh ( content )","title":"content_adaptor_bokeh_layout()"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor_core","text":"Convert markdown or image to Markdown or Image content. Source code in esparto/_adaptors.py @content_adaptor . register ( str ) def content_adaptor_core ( content : str ) -> Content : \"\"\"Convert markdown or image to Markdown or Image content.\"\"\" guess = guess_type ( content ) if guess and \"image\" in str ( guess [ 0 ]): return Image ( content ) return Markdown ( content )","title":"content_adaptor_core()"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor_df","text":"Convert Pandas DataFrame to DataFramePD content. Source code in esparto/_adaptors.py @content_adaptor . register ( DataFrame ) def content_adaptor_df ( content : DataFrame ) -> DataFramePd : \"\"\"Convert Pandas DataFrame to DataFramePD content.\"\"\" return DataFramePd ( content )","title":"content_adaptor_df()"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor_fig","text":"Convert Matplotlib Figure to FigureMpl content. Source code in esparto/_adaptors.py @content_adaptor . register ( Figure ) def content_adaptor_fig ( content : Figure ) -> FigureMpl : \"\"\"Convert Matplotlib Figure to FigureMpl content.\"\"\" return FigureMpl ( content )","title":"content_adaptor_fig()"},{"location":"03-api-reference/adaptors/#esparto._adaptors.content_adaptor_plotly","text":"Convert Plotly Figure to FigurePlotly content. Source code in esparto/_adaptors.py @content_adaptor . register ( PlotlyFigure ) def content_adaptor_plotly ( content : PlotlyFigure ) -> FigurePlotly : \"\"\"Convert Plotly Figure to FigurePlotly content.\"\"\" return FigurePlotly ( content )","title":"content_adaptor_plotly()"},{"location":"03-api-reference/content/","text":"esparto._content Info Content classes should be accessed from the module top level. import esparto as es # Create some new Markdown text markdown = es . Markdown ( \"Example _markdown_ text.\" ) Content Template for Content elements. All Content classes come with these methods and attributes. Attributes: Name Type Description content Any Text or image to be rendered - should match the encompassing Content class. content : Any property readonly Text or image to be rendered - should match the encompassing Content class. display ( self ) Display rendered content in a Jupyter Notebook cell. Source code in esparto/_content.py def display ( self ) -> None : \"\"\"Display rendered content in a Jupyter Notebook cell.\"\"\" nb_display ( self ) to_html ( self ) Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py @abstractmethod def to_html ( self ) -> str : \"\"\"Render content to HTML code. Returns: HTML code. \"\"\" raise NotImplementedError Markdown Markdown text content. Parameters: Name Type Description Default text str Markdown text to be added to document. required to_html ( self ) Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self ) -> str : html = md . markdown ( self . content ) html = f \" { html } \\n \" html = f \"<div class='container-fluid px-1'> \\n { html } \\n </div>\" return html Image Image content. Can be read from a filepath, PIL.Image object, or from bytes. Parameters: Name Type Description Default image str, PIL.Image, BytesIO Image data. required caption str Image caption (default = None) required alt_text str Alternative text. (default = None) required scale float Value by which to scale image, must be > 0 and <= 1. (default = 1) required rescale ( self , scale ) Rescale the image prior to rendering. Note: Images can be scaled down only. Parameters: Name Type Description Default scale float Scaling ratio. required Source code in esparto/_content.py def rescale ( self , scale ) -> \"Image\" : \"\"\"Rescale the image prior to rendering. Note: Images can be scaled down only. Args: scale (float): Scaling ratio. \"\"\" self . scale = scale return self to_html ( self ) Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self ) -> str : if isinstance ( self . content , PILImage ): image = self . content else : image = Img . open ( self . content ) # Resize image if required if self . scale != 1 : x = int ( image . size [ 0 ] * self . scale ) y = int ( image . size [ 1 ] * self . scale ) image . thumbnail (( x , y )) width = f \" { image . size [ 0 ] } px\" height = f \" { image . size [ 1 ] } px\" image_encoded = _image_to_base64 ( image ) html = ( \"<figure class='text-center'>\" + \"<img class='figure-img img-fluid rounded' \" + f \"alt=' { self . alt_text } ' \" + f \"height=' { height } ' width=' { width } ' \" + f \"src='data:image/png;base64, { image_encoded } '>\" ) if self . caption : html += f \"<figcaption class='figure-caption'> { self . caption } </figcaption>\" html += \"</figure>\" return html DataFramePd Pandas DataFrame to be rendered as a table. Parameters: Name Type Description Default df pd.DataFrame A Pandas DataFrame required index bool If True, render the DataFrame index. (default = False) required col_space str, int Minimum column width in CSS units. Use int for pixels. (default = 10) required to_html ( self ) Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self ) -> str : classes = \"table table-sm table-striped table-hover table-bordered\" html = self . content . to_html ( index = self . index , border = 0 , col_space = self . col_space , classes = classes ) return html FigureMpl Matplotlib figure to be rendered as an image. Parameters: Name Type Description Default figure plt.Figure A Matplotlib figure. required caption str Image caption (default = None) required alt_text str Alternative text. (default = None) required FigureBokeh Bokeh object to be rendered as an interactive plot. Parameters: Name Type Description Default figure bokeh.layouts.LayoutDOM A Bokeh object. required width int Width in pixels. (default = 'auto') required height int Height in pixels. (default = 'auto') required to_html ( self ) Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self ) -> str : html , js = components ( self . content ) # Remove outer <div> tag so we can give our own attributes html = _remove_outer_div ( html ) return f \"<div class='mb-3' style='width: { self . width } ; height: { self . height } ;'> { html } \\n { js } \\n </div>\" FigurePlotly Plotly figure to be rendered as an interactive plot. Parameters: Name Type Description Default figure plotly.graph_objs._figure.Figure A Plotly figure. required width int Width in pixels. (default = 'auto') required height int Height in pixels. (default = 500') required to_html ( self ) Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self ) -> str : html = plotly_to_html ( self . content , include_plotlyjs = False , full_html = False ) # Remove outer <div> tag so we can give our own attributes. html = _remove_outer_div ( html ) return f \"<div class='responsive-plot mb-3' style='width: { self . width } ; height: { self . height } ;'> { html } \\n </div>\"","title":"Content"},{"location":"03-api-reference/content/#esparto_content","text":"Info Content classes should be accessed from the module top level. import esparto as es # Create some new Markdown text markdown = es . Markdown ( \"Example _markdown_ text.\" )","title":"esparto._content"},{"location":"03-api-reference/content/#esparto._content.Content","text":"Template for Content elements. All Content classes come with these methods and attributes. Attributes: Name Type Description content Any Text or image to be rendered - should match the encompassing Content class.","title":"Content"},{"location":"03-api-reference/content/#esparto._content.Content.content","text":"Text or image to be rendered - should match the encompassing Content class.","title":"content"},{"location":"03-api-reference/content/#esparto._content.Content.display","text":"Display rendered content in a Jupyter Notebook cell. Source code in esparto/_content.py def display ( self ) -> None : \"\"\"Display rendered content in a Jupyter Notebook cell.\"\"\" nb_display ( self )","title":"display()"},{"location":"03-api-reference/content/#esparto._content.Content.to_html","text":"Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py @abstractmethod def to_html ( self ) -> str : \"\"\"Render content to HTML code. Returns: HTML code. \"\"\" raise NotImplementedError","title":"to_html()"},{"location":"03-api-reference/content/#esparto._content.Markdown","text":"Markdown text content. Parameters: Name Type Description Default text str Markdown text to be added to document. required","title":"Markdown"},{"location":"03-api-reference/content/#esparto._content.Markdown.to_html","text":"Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self ) -> str : html = md . markdown ( self . content ) html = f \" { html } \\n \" html = f \"<div class='container-fluid px-1'> \\n { html } \\n </div>\" return html","title":"to_html()"},{"location":"03-api-reference/content/#esparto._content.Image","text":"Image content. Can be read from a filepath, PIL.Image object, or from bytes. Parameters: Name Type Description Default image str, PIL.Image, BytesIO Image data. required caption str Image caption (default = None) required alt_text str Alternative text. (default = None) required scale float Value by which to scale image, must be > 0 and <= 1. (default = 1) required","title":"Image"},{"location":"03-api-reference/content/#esparto._content.Image.rescale","text":"Rescale the image prior to rendering. Note: Images can be scaled down only. Parameters: Name Type Description Default scale float Scaling ratio. required Source code in esparto/_content.py def rescale ( self , scale ) -> \"Image\" : \"\"\"Rescale the image prior to rendering. Note: Images can be scaled down only. Args: scale (float): Scaling ratio. \"\"\" self . scale = scale return self","title":"rescale()"},{"location":"03-api-reference/content/#esparto._content.Image.to_html","text":"Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self ) -> str : if isinstance ( self . content , PILImage ): image = self . content else : image = Img . open ( self . content ) # Resize image if required if self . scale != 1 : x = int ( image . size [ 0 ] * self . scale ) y = int ( image . size [ 1 ] * self . scale ) image . thumbnail (( x , y )) width = f \" { image . size [ 0 ] } px\" height = f \" { image . size [ 1 ] } px\" image_encoded = _image_to_base64 ( image ) html = ( \"<figure class='text-center'>\" + \"<img class='figure-img img-fluid rounded' \" + f \"alt=' { self . alt_text } ' \" + f \"height=' { height } ' width=' { width } ' \" + f \"src='data:image/png;base64, { image_encoded } '>\" ) if self . caption : html += f \"<figcaption class='figure-caption'> { self . caption } </figcaption>\" html += \"</figure>\" return html","title":"to_html()"},{"location":"03-api-reference/content/#esparto._content.DataFramePd","text":"Pandas DataFrame to be rendered as a table. Parameters: Name Type Description Default df pd.DataFrame A Pandas DataFrame required index bool If True, render the DataFrame index. (default = False) required col_space str, int Minimum column width in CSS units. Use int for pixels. (default = 10) required","title":"DataFramePd"},{"location":"03-api-reference/content/#esparto._content.DataFramePd.to_html","text":"Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self ) -> str : classes = \"table table-sm table-striped table-hover table-bordered\" html = self . content . to_html ( index = self . index , border = 0 , col_space = self . col_space , classes = classes ) return html","title":"to_html()"},{"location":"03-api-reference/content/#esparto._content.FigureMpl","text":"Matplotlib figure to be rendered as an image. Parameters: Name Type Description Default figure plt.Figure A Matplotlib figure. required caption str Image caption (default = None) required alt_text str Alternative text. (default = None) required","title":"FigureMpl"},{"location":"03-api-reference/content/#esparto._content.FigureBokeh","text":"Bokeh object to be rendered as an interactive plot. Parameters: Name Type Description Default figure bokeh.layouts.LayoutDOM A Bokeh object. required width int Width in pixels. (default = 'auto') required height int Height in pixels. (default = 'auto') required","title":"FigureBokeh"},{"location":"03-api-reference/content/#esparto._content.FigureBokeh.to_html","text":"Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self ) -> str : html , js = components ( self . content ) # Remove outer <div> tag so we can give our own attributes html = _remove_outer_div ( html ) return f \"<div class='mb-3' style='width: { self . width } ; height: { self . height } ;'> { html } \\n { js } \\n </div>\"","title":"to_html()"},{"location":"03-api-reference/content/#esparto._content.FigurePlotly","text":"Plotly figure to be rendered as an interactive plot. Parameters: Name Type Description Default figure plotly.graph_objs._figure.Figure A Plotly figure. required width int Width in pixels. (default = 'auto') required height int Height in pixels. (default = 500') required","title":"FigurePlotly"},{"location":"03-api-reference/content/#esparto._content.FigurePlotly.to_html","text":"Render content to HTML code. Returns: Type Description str HTML code. Source code in esparto/_content.py def to_html ( self ) -> str : html = plotly_to_html ( self . content , include_plotlyjs = False , full_html = False ) # Remove outer <div> tag so we can give our own attributes. html = _remove_outer_div ( html ) return f \"<div class='responsive-plot mb-3' style='width: { self . width } ; height: { self . height } ;'> { html } \\n </div>\"","title":"to_html()"},{"location":"03-api-reference/layout/","text":"esparto._layout Info Layout classes should be accessed from the module top level. import esparto as es # Create a new Page page = es . Page () Layout Template for Layout elements. All Layout classes come with these methods and attributes. Attributes: Name Type Description title str Title for object reference and HTML rendering. children list Child elements representing the document tree. display ( self ) Display rendered document in a Jupyter Notebook cell. Source code in esparto/_layout.py def display ( self ): \"\"\"Display rendered document in a Jupyter Notebook cell.\"\"\" nb_display ( self ) save ( self , filepath = './esparto-doc.html' , return_html = False ) Render document to HTML and save to disk. Parameters: Name Type Description Default filepath str Destination filepath. (default = './esparto-doc.html') './esparto-doc.html' return_html bool If True, return HTML as a string. False Returns: Type Description Optional[str] Document rendered as HTML. (If 'return_html' is True) Source code in esparto/_layout.py def save ( self , filepath : str = \"./esparto-doc.html\" , return_html : bool = False ) -> Optional [ str ]: \"\"\" Render document to HTML and save to disk. Args: filepath: Destination filepath. (default = './esparto-doc.html') return_html: If True, return HTML as a string. Returns: Document rendered as HTML. (If 'return_html' is True) \"\"\" html = publish ( self , filepath = filepath , return_html = return_html ) if return_html : return html else : return None to_dict ( self ) Return object as a dictionary. Source code in esparto/_layout.py def to_dict ( self ) -> dict : \"\"\"Return object as a dictionary.\"\"\" return dict ( getmembers ( self )) to_html ( self ) Render document to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_layout.py def to_html ( self ) -> str : \"\"\"Render document to HTML code. Returns: str: HTML code. \"\"\" children_rendered = \" \" . join ([ c . to_html () for c in self . children ]) title_rendered = f \" { self . _render_title () } \\n \" if self . _title else None if title_rendered : html = f \" { self . _tag_open } \\n { title_rendered }{ children_rendered } \\n { self . _tag_close } \\n \" else : html = f \" { self . _tag_open } \\n { children_rendered } \\n { self . _tag_close } \\n \" return html Page Page - top level element for defining a document. Parameters: Name Type Description Default *children Layout Layout items to include in the Page. required title str Page title. required org_name str Organisation name. required Section Section - defines a Section within a Page. Parameters: Name Type Description Default *children Row items to include in the Section. required title Section title. required Row Row - defines a Row within a Section. Parameters: Name Type Description Default *children Column items to include in the Row. required title Row title. required Column Column - defines a Column within a Row. Parameters: Name Type Description Default *children Content to include in the Column. required title Column title. required","title":"Layout"},{"location":"03-api-reference/layout/#esparto_layout","text":"Info Layout classes should be accessed from the module top level. import esparto as es # Create a new Page page = es . Page ()","title":"esparto._layout"},{"location":"03-api-reference/layout/#esparto._layout.Layout","text":"Template for Layout elements. All Layout classes come with these methods and attributes. Attributes: Name Type Description title str Title for object reference and HTML rendering. children list Child elements representing the document tree.","title":"Layout"},{"location":"03-api-reference/layout/#esparto._layout.Layout.display","text":"Display rendered document in a Jupyter Notebook cell. Source code in esparto/_layout.py def display ( self ): \"\"\"Display rendered document in a Jupyter Notebook cell.\"\"\" nb_display ( self )","title":"display()"},{"location":"03-api-reference/layout/#esparto._layout.Layout.save","text":"Render document to HTML and save to disk. Parameters: Name Type Description Default filepath str Destination filepath. (default = './esparto-doc.html') './esparto-doc.html' return_html bool If True, return HTML as a string. False Returns: Type Description Optional[str] Document rendered as HTML. (If 'return_html' is True) Source code in esparto/_layout.py def save ( self , filepath : str = \"./esparto-doc.html\" , return_html : bool = False ) -> Optional [ str ]: \"\"\" Render document to HTML and save to disk. Args: filepath: Destination filepath. (default = './esparto-doc.html') return_html: If True, return HTML as a string. Returns: Document rendered as HTML. (If 'return_html' is True) \"\"\" html = publish ( self , filepath = filepath , return_html = return_html ) if return_html : return html else : return None","title":"save()"},{"location":"03-api-reference/layout/#esparto._layout.Layout.to_dict","text":"Return object as a dictionary. Source code in esparto/_layout.py def to_dict ( self ) -> dict : \"\"\"Return object as a dictionary.\"\"\" return dict ( getmembers ( self ))","title":"to_dict()"},{"location":"03-api-reference/layout/#esparto._layout.Layout.to_html","text":"Render document to HTML code. Returns: Type Description str str: HTML code. Source code in esparto/_layout.py def to_html ( self ) -> str : \"\"\"Render document to HTML code. Returns: str: HTML code. \"\"\" children_rendered = \" \" . join ([ c . to_html () for c in self . children ]) title_rendered = f \" { self . _render_title () } \\n \" if self . _title else None if title_rendered : html = f \" { self . _tag_open } \\n { title_rendered }{ children_rendered } \\n { self . _tag_close } \\n \" else : html = f \" { self . _tag_open } \\n { children_rendered } \\n { self . _tag_close } \\n \" return html","title":"to_html()"},{"location":"03-api-reference/layout/#esparto._layout.Page","text":"Page - top level element for defining a document. Parameters: Name Type Description Default *children Layout Layout items to include in the Page. required title str Page title. required org_name str Organisation name. required","title":"Page"},{"location":"03-api-reference/layout/#esparto._layout.Section","text":"Section - defines a Section within a Page. Parameters: Name Type Description Default *children Row items to include in the Section. required title Section title. required","title":"Section"},{"location":"03-api-reference/layout/#esparto._layout.Row","text":"Row - defines a Row within a Section. Parameters: Name Type Description Default *children Column items to include in the Row. required title Row title. required","title":"Row"},{"location":"03-api-reference/layout/#esparto._layout.Column","text":"Column - defines a Column within a Row. Parameters: Name Type Description Default *children Content to include in the Column. required title Column title. required","title":"Column"},{"location":"03-api-reference/publish/","text":"esparto._publish Info Publishing methods should be accessed via Layout classes. import esparto as es # Create a new Page page = es . Page ( title = \"My New Page\" ) # Render to Jupyter Notebook cell: page . display () # Publish the document to an HTML file: page . save () publish ( document , filepath = './esparto-doc.html' , return_html = False ) Save Layout element to HTML. Parameters: Name Type Description Default document Layout Any Layout object. required filepath Optional[str] Filepath to write to. (default = './esparto-doc.html') './esparto-doc.html' return_html bool Returns HTML string if True. False Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def publish ( document : \"Layout\" , filepath : Optional [ str ] = \"./esparto-doc.html\" , return_html : bool = False , ) -> Optional [ str ]: \"\"\"Save Layout element to HTML. Args: document (Layout): Any Layout object. filepath (str): Filepath to write to. (default = './esparto-doc.html') return_html (bool): Returns HTML string if True. Returns: str: HTML string if return_html is True. \"\"\" if not filepath : filepath = \"./esparto-doc.html\" required_deps = document . _required_dependencies () head_deps = _get_head_deps ( required_deps ) tail_deps = _get_tail_deps ( required_deps ) # Jinja requires dict for accessing properties doc_dict = document . to_dict () html_rendered : str = _BASE_TEMPLATE . render ( content = doc_dict , head_deps = head_deps , tail_deps = tail_deps ) html_prettified = _prettify_html ( html_rendered ) with open ( filepath , \"w\" ) as f : f . write ( html_prettified ) if return_html : return html_prettified else : return None nb_display ( item , return_html = False ) Display Layout or Content to Jupyter Notebook cell. Parameters: Name Type Description Default item Union[Layout, Content] A Layout or Content item. required return_html bool Returns HTML string if True. False Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def nb_display ( item : Union [ \"Layout\" , \"Content\" ], return_html : bool = False ) -> Optional [ str ]: \"\"\"Display Layout or Content to Jupyter Notebook cell. Args: item (Layout, Content): A Layout or Content item. return_html (bool): Returns HTML string if True. Returns: str: HTML string if return_html is True. \"\"\" if \"IPython\" in _INSTALLED_MODULES : from IPython.display import HTML , Javascript , display # type: ignore from esparto._layout import Layout required_deps : set = set () if isinstance ( item , Layout ): required_deps = item . _required_dependencies () elif hasattr ( item , \"_dependencies\" ): required_deps = item . _dependencies head_deps = \" \\n \" . join ( _get_head_deps ( required_deps )) tail_deps = \" \\n \" . join ( _get_tail_deps ( required_deps )) content_html = f \"<div class='container-fluid' style='width: 100%; height: 100%;'> \\n { item . to_html () } \\n </div>\" render_html = ( f \"<!doctype html> \\n <html> \\n <head> { head_deps } </head> \\n \" f \"<body> \\n { content_html } \\n { tail_deps } \\n </body> \\n </html> \\n \" ) print () display ( HTML ( render_html ), metadata = dict ( isolated = True )) # This allows time to download plotly.js from the CDN - otherwise cell renders empty # TODO: Make this asynchronous if \"plotly\" in required_deps : time . sleep ( 1 ) print () # Prevent output scrolling js = \"$('.output_scroll').removeClass('output_scroll')\" display ( Javascript ( js )) if return_html : return render_html else : return None else : raise ModuleNotFoundError ( \"IPython\" )","title":"Publish"},{"location":"03-api-reference/publish/#esparto_publish","text":"Info Publishing methods should be accessed via Layout classes. import esparto as es # Create a new Page page = es . Page ( title = \"My New Page\" ) # Render to Jupyter Notebook cell: page . display () # Publish the document to an HTML file: page . save ()","title":"esparto._publish"},{"location":"03-api-reference/publish/#esparto._publish.publish","text":"Save Layout element to HTML. Parameters: Name Type Description Default document Layout Any Layout object. required filepath Optional[str] Filepath to write to. (default = './esparto-doc.html') './esparto-doc.html' return_html bool Returns HTML string if True. False Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def publish ( document : \"Layout\" , filepath : Optional [ str ] = \"./esparto-doc.html\" , return_html : bool = False , ) -> Optional [ str ]: \"\"\"Save Layout element to HTML. Args: document (Layout): Any Layout object. filepath (str): Filepath to write to. (default = './esparto-doc.html') return_html (bool): Returns HTML string if True. Returns: str: HTML string if return_html is True. \"\"\" if not filepath : filepath = \"./esparto-doc.html\" required_deps = document . _required_dependencies () head_deps = _get_head_deps ( required_deps ) tail_deps = _get_tail_deps ( required_deps ) # Jinja requires dict for accessing properties doc_dict = document . to_dict () html_rendered : str = _BASE_TEMPLATE . render ( content = doc_dict , head_deps = head_deps , tail_deps = tail_deps ) html_prettified = _prettify_html ( html_rendered ) with open ( filepath , \"w\" ) as f : f . write ( html_prettified ) if return_html : return html_prettified else : return None","title":"publish()"},{"location":"03-api-reference/publish/#esparto._publish.nb_display","text":"Display Layout or Content to Jupyter Notebook cell. Parameters: Name Type Description Default item Union[Layout, Content] A Layout or Content item. required return_html bool Returns HTML string if True. False Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def nb_display ( item : Union [ \"Layout\" , \"Content\" ], return_html : bool = False ) -> Optional [ str ]: \"\"\"Display Layout or Content to Jupyter Notebook cell. Args: item (Layout, Content): A Layout or Content item. return_html (bool): Returns HTML string if True. Returns: str: HTML string if return_html is True. \"\"\" if \"IPython\" in _INSTALLED_MODULES : from IPython.display import HTML , Javascript , display # type: ignore from esparto._layout import Layout required_deps : set = set () if isinstance ( item , Layout ): required_deps = item . _required_dependencies () elif hasattr ( item , \"_dependencies\" ): required_deps = item . _dependencies head_deps = \" \\n \" . join ( _get_head_deps ( required_deps )) tail_deps = \" \\n \" . join ( _get_tail_deps ( required_deps )) content_html = f \"<div class='container-fluid' style='width: 100%; height: 100%;'> \\n { item . to_html () } \\n </div>\" render_html = ( f \"<!doctype html> \\n <html> \\n <head> { head_deps } </head> \\n \" f \"<body> \\n { content_html } \\n { tail_deps } \\n </body> \\n </html> \\n \" ) print () display ( HTML ( render_html ), metadata = dict ( isolated = True )) # This allows time to download plotly.js from the CDN - otherwise cell renders empty # TODO: Make this asynchronous if \"plotly\" in required_deps : time . sleep ( 1 ) print () # Prevent output scrolling js = \"$('.output_scroll').removeClass('output_scroll')\" display ( Javascript ( js )) if return_html : return render_html else : return None else : raise ModuleNotFoundError ( \"IPython\" )","title":"nb_display()"},{"location":"04-about/authors/","text":"Credits Lead Developer Dominic Thorn dominic.thorn@gmail.com domvwt.github.io","title":"Authors"},{"location":"04-about/authors/#credits","text":"","title":"Credits"},{"location":"04-about/authors/#lead-developer","text":"Dominic Thorn dominic.thorn@gmail.com domvwt.github.io","title":"Lead Developer"},{"location":"04-about/contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report Bugs Report bugs at https://github.com/domvwt/esparto/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation esparto could always use more documentation, whether as part of the official esparto docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback The best way to send feedback is to file an issue at https://github.com/domvwt/esparto/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! Ready to contribute? Here's how to set up esparto for local development. Fork the esparto repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/esparto.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: $ mkvirtualenv esparto $ cd esparto/ $ python setup.py develop Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: $ flake8 esparto tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 2.7, 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://travis-ci.org/domvwt/esparto/pull_requests and make sure that the tests pass for all supported Python versions. Tips To run a subset of tests: $ pytest tests.test_esparto Deploying A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.rst). Then run: $ bump2version patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"04-about/contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"04-about/contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"04-about/contributing/#report-bugs","text":"Report bugs at https://github.com/domvwt/esparto/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"04-about/contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"04-about/contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"04-about/contributing/#write-documentation","text":"esparto could always use more documentation, whether as part of the official esparto docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"04-about/contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/domvwt/esparto/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"04-about/contributing/#get-started","text":"Ready to contribute? Here's how to set up esparto for local development. Fork the esparto repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/esparto.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: $ mkvirtualenv esparto $ cd esparto/ $ python setup.py develop Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: $ flake8 esparto tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"04-about/contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 2.7, 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://travis-ci.org/domvwt/esparto/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"04-about/contributing/#tips","text":"To run a subset of tests: $ pytest tests.test_esparto","title":"Tips"},{"location":"04-about/contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.rst). Then run: $ bump2version patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"04-about/license/","text":"MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Copyright (c) 2021 - Dominic Thorn","title":"License"},{"location":"04-about/license/#mit-license","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Copyright (c) 2021 - Dominic Thorn","title":"MIT License"},{"location":"04-about/release-notes/","text":"Release Notes 0.1.2 (2021-04-09) Relax dependency on Pillow to allow versions >=7.0.0 and <9.0.0. 0.1.1 (2021-04-08) Update package metadata for pypi. 0.1.0 (2021-04-07) First public release.","title":"Release Notes"},{"location":"04-about/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"04-about/release-notes/#012-2021-04-09","text":"Relax dependency on Pillow to allow versions >=7.0.0 and <9.0.0.","title":"0.1.2 (2021-04-09)"},{"location":"04-about/release-notes/#011-2021-04-08","text":"Update package metadata for pypi.","title":"0.1.1 (2021-04-08)"},{"location":"04-about/release-notes/#010-2021-04-07","text":"First public release.","title":"0.1.0 (2021-04-07)"},{"location":"04-about/roadmap/","text":"New Features Provide content support for Plotly Bokeh Altair Alternative themes Additional Bootstrap components Custom CSS","title":"Roadmap"},{"location":"04-about/roadmap/#new-features","text":"Provide content support for Plotly Bokeh Altair Alternative themes Additional Bootstrap components Custom CSS","title":"New Features"}]}