{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"esparto Introduction esparto is a Python library for building data driven reports with content from popular analytics packages. The project takes a straightforward approach to document design; with a focus on usability, portability, and extensiblity. Creating a report is as simple as instantiating a Page object and 'adding' content in the form of DataFrames, plots, and markdown text. Documents can be built interactively in a notebook environment, and the results shared as a self-contained HTML page or PDF file. Further customisation of the output is possible by passing a CSS stylesheet, changing the Jinja template, or declaring additional element styles within the code. The responsive Bootstrap grid ensures documents adapt to any viewing device. Basic Usage import esparto as es # Do some analysis pandas_dataframe = ... plotly_figure = ... # Create a Page object page = es . Page ( title = \"My Report\" ) # Add content page [ \"Data Analysis\" ][ \"Plot\" ] = plotly_figure page [ \"Data Analysis\" ][ \"Data\" ] = pandas_dataframe # Save to HTML or PDF page . save_html ( \"my-report.html\" ) page . save_pdf ( \"my-report.pdf\" ) Main Features Interactive document design with Jupyter Notebooks Share as self-contained HTML or PDF Customise with CSS and Jinja Responsive Bootstrap grid layout Content adaptors for: Markdown Images Pandas DataFrames Matplotlib Bokeh Plotly Installation esparto is available from PyPI and Conda : pip install esparto conda install esparto -c conda-forge Dependencies python >= 3.6 jinja2 markdown BeautifulSoup PyYAML Optional Pillow (for image content) weasyprint (for PDF output) License MIT Documentation Documentation and examples are available at domvwt.github.io/esparto/ . Contributions, Issues, and Requests Feedback and contributions are welcome - please raise an issue or pull request on GitHub . Examples Iris Report - Webpage | PDF | Notebook","title":"Overview"},{"location":"#esparto","text":"","title":"esparto"},{"location":"#introduction","text":"esparto is a Python library for building data driven reports with content from popular analytics packages. The project takes a straightforward approach to document design; with a focus on usability, portability, and extensiblity. Creating a report is as simple as instantiating a Page object and 'adding' content in the form of DataFrames, plots, and markdown text. Documents can be built interactively in a notebook environment, and the results shared as a self-contained HTML page or PDF file. Further customisation of the output is possible by passing a CSS stylesheet, changing the Jinja template, or declaring additional element styles within the code. The responsive Bootstrap grid ensures documents adapt to any viewing device.","title":"Introduction"},{"location":"#basic-usage","text":"import esparto as es # Do some analysis pandas_dataframe = ... plotly_figure = ... # Create a Page object page = es . Page ( title = \"My Report\" ) # Add content page [ \"Data Analysis\" ][ \"Plot\" ] = plotly_figure page [ \"Data Analysis\" ][ \"Data\" ] = pandas_dataframe # Save to HTML or PDF page . save_html ( \"my-report.html\" ) page . save_pdf ( \"my-report.pdf\" )","title":"Basic Usage"},{"location":"#main-features","text":"Interactive document design with Jupyter Notebooks Share as self-contained HTML or PDF Customise with CSS and Jinja Responsive Bootstrap grid layout Content adaptors for: Markdown Images Pandas DataFrames Matplotlib Bokeh Plotly","title":"Main Features"},{"location":"#installation","text":"esparto is available from PyPI and Conda : pip install esparto conda install esparto -c conda-forge","title":"Installation"},{"location":"#dependencies","text":"python >= 3.6 jinja2 markdown BeautifulSoup PyYAML","title":"Dependencies"},{"location":"#license","text":"MIT","title":"License"},{"location":"#documentation","text":"Documentation and examples are available at domvwt.github.io/esparto/ .","title":"Documentation"},{"location":"#contributions-issues-and-requests","text":"Feedback and contributions are welcome - please raise an issue or pull request on GitHub .","title":"Contributions, Issues, and Requests"},{"location":"#examples","text":"Iris Report - Webpage | PDF | Notebook","title":"Examples"},{"location":"02-user-guide/customisation/","text":"Jinja CSS Bootstrap Themes Layout Classes Coming Soon!","title":"Customisation"},{"location":"02-user-guide/customisation/#coming-soon","text":"","title":"Coming Soon!"},{"location":"02-user-guide/quick-start/","text":"Quick Start Create a Page import esparto as es page = es . Page ( title = \"Page Title\" ) page [ \"Section Title\" ] += \"Some text\" page [ \"Section Title\" ] += \"More text\" page . tree () {'Page Title': [{'Section Title': [{'Row 0': [{'Column 0': ['Markdown']}]}, {'Row 1': [{'Column 0': ['Markdown']}]}]}]} Add Content Define Rows and Columns page [ \"Section Title\" ][ \"Row Title\" ][ 0 ] = \"Some content\" page [ \"Section Title\" ][ \"Row Title\" ][ 1 ] = \"More content\" {'Page Title': [{'Section Title': [{'Row Title': [{'Column 0': ['Markdown']}, {'Column 1': ['Markdown']}]}]}]} Define multiple Columns page [ \"Section Title\" ][ \"Row Title\" ] = ( { \"Column Title\" : \"Some content\" }, { \"Column Two\" : \"More content\" } ) {'Page Title': [{'Section Title': [{'Row Title': [{'Column Title': ['Markdown']}, {'Column Two': ['Markdown']}]}]}]} Update Content Access existing content via Indexing or as Attributes page [ \"Section Title\" ][ \"Row Title\" ][ \"Column Title\" ] = image_01 page . section_title . row_title . column_two = image_02 {'Page Title': [{'Section Title': [{'Row Title': [{'Column Title': ['Image']}, {'Column Two': ['Image']}]}]}]} Delete Content Delete the last Column del page . section_title . row_title [ - 1 ] {'Page Title': [{'Section Title': [{'Row Title': [{'Column Title': ['Image']}]}]}]} Delete a named Column del page . section_title . row_title . column_two {'Page Title': [{'Section Title': [{'Row Title': [{'Column Title': ['Image']}]}]}]} Save the Document As a webpage my_page . save_html ( \"my-esparto-doc.html\" ) As a PDF my_page . save_pdf ( \"my-esparto-doc.pdf\" )","title":"Quick Start"},{"location":"02-user-guide/quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"02-user-guide/quick-start/#create-a-page","text":"import esparto as es page = es . Page ( title = \"Page Title\" ) page [ \"Section Title\" ] += \"Some text\" page [ \"Section Title\" ] += \"More text\" page . tree () {'Page Title': [{'Section Title': [{'Row 0': [{'Column 0': ['Markdown']}]}, {'Row 1': [{'Column 0': ['Markdown']}]}]}]}","title":"Create a Page"},{"location":"02-user-guide/quick-start/#add-content","text":"","title":"Add Content"},{"location":"02-user-guide/quick-start/#update-content","text":"","title":"Update Content"},{"location":"02-user-guide/quick-start/#delete-content","text":"","title":"Delete Content"},{"location":"02-user-guide/quick-start/#save-the-document","text":"","title":"Save the Document"},{"location":"02-user-guide/tutorial-notebooks/","text":"Tutorial Notebooks Data Analysis The Iris dataset is one of the best known datasets in statistics. In this example we put together a simple data analysis report using: Text content with markdown formatting Pandas DataFrames Plots from Matplotlib Webpage | PDF","title":"Tutorial Notebooks"},{"location":"02-user-guide/tutorial-notebooks/#tutorial-notebooks","text":"","title":"Tutorial  Notebooks"},{"location":"02-user-guide/tutorial-notebooks/#data-analysis","text":"The Iris dataset is one of the best known datasets in statistics. In this example we put together a simple data analysis report using: Text content with markdown formatting Pandas DataFrames Plots from Matplotlib Webpage | PDF","title":"Data Analysis"},{"location":"03-api-reference/adaptors/","text":"esparto._adaptors Info The content_adaptor function is called internally when an explicit Content class is not provided. Objects are matched to a suitable Content class through single dispatch . import esparto as es # Text automatically converted to Markdown content. page = es . Page ( title = \"New Page\" ) page [ \"New Section\" ] = \"Example _markdown_ text.\" page . tree () {'New Page': [{'New Section': [{'Row 0': [{'Column 0': ['Markdown']}]}]}]} _adaptors private content_adaptor ( content ) Wrap content in the required class. If Layout object is passed, return unchanged. Parameters: Name Type Description Default content Content Any content to be added to the document. required Returns: Type Description Union[esparto._content.Content, esparto._layout.Layout, Dict[str, Any]] Content: Appropriately wrapped content. Source code in esparto/_adaptors.py @ft . singledispatch def content_adaptor ( content : Content ) -> Union [ Content , Layout , Dict [ str , Any ]]: \"\"\" Wrap content in the required class. If Layout object is passed, return unchanged. Args: content (Any): Any content to be added to the document. Returns: Content: Appropriately wrapped content. \"\"\" if not issubclass ( type ( content ), Content ): raise TypeError ( f \"Unsupported content type: { type ( content ) } \" ) return content content_adaptor_bokeh ( content ) Convert Bokeh Layout to FigureBokeh content. Source code in esparto/_adaptors.py @content_adaptor . register ( BokehObject ) def content_adaptor_bokeh ( content : BokehObject ) -> FigureBokeh : \"\"\"Convert Bokeh Layout to FigureBokeh content.\"\"\" return FigureBokeh ( content ) content_adaptor_core ( content ) Convert text or image to Markdown or Image content. Source code in esparto/_adaptors.py @content_adaptor . register ( str ) @content_adaptor . register ( Path ) def content_adaptor_core ( content : Union [ str , Path ]) -> Content : \"\"\"Convert text or image to Markdown or Image content.\"\"\" content = str ( content ) guess = mt . guess_type ( content ) if guess and isinstance ( guess [ 0 ], str ): file_type = guess [ 0 ] . split ( \"/\" )[ 0 ] if file_type == \"image\" : return Image ( content ) elif file_type == \"text\" : content = Path ( content ) . read_text () else : raise TypeError ( f \" { content } : { file_type } \" ) return Markdown ( content ) content_adaptor_df ( content ) Convert Pandas DataFrame to DataFramePD content. Source code in esparto/_adaptors.py @content_adaptor . register ( DataFrame ) def content_adaptor_df ( content : DataFrame ) -> DataFramePd : \"\"\"Convert Pandas DataFrame to DataFramePD content.\"\"\" return DataFramePd ( content ) content_adaptor_dict ( content ) Pass through dict of {\"title\": content} . Source code in esparto/_adaptors.py @content_adaptor . register ( dict ) def content_adaptor_dict ( content : Dict [ str , Any ]) -> Dict [ str , Any ]: \"\"\"Pass through dict of `{\"title\": content}`.\"\"\" if not ( len ( content ) == 1 and isinstance ( list ( content . keys ())[ 0 ], str )): raise ValueError ( \"Content dict must be passed as {'title': content}\" ) return content content_adaptor_layout ( content ) If Layout object is passed, return unchanged. Source code in esparto/_adaptors.py @content_adaptor . register ( Layout ) def content_adaptor_layout ( content : Layout ) -> Layout : \"\"\"If Layout object is passed, return unchanged.\"\"\" return content content_adaptor_mpl ( content ) Convert Matplotlib Figure to FigureMpl content. Source code in esparto/_adaptors.py @content_adaptor . register ( Figure ) def content_adaptor_mpl ( content : Figure ) -> FigureMpl : \"\"\"Convert Matplotlib Figure to FigureMpl content.\"\"\" return FigureMpl ( content ) content_adaptor_plotly ( content ) Convert Plotly Figure to FigurePlotly content. Source code in esparto/_adaptors.py @content_adaptor . register ( PlotlyFigure ) def content_adaptor_plotly ( content : PlotlyFigure ) -> FigurePlotly : \"\"\"Convert Plotly Figure to FigurePlotly content.\"\"\" return FigurePlotly ( content )","title":"Adaptors"},{"location":"03-api-reference/adaptors/#esparto_adaptors","text":"Info The content_adaptor function is called internally when an explicit Content class is not provided. Objects are matched to a suitable Content class through single dispatch . import esparto as es # Text automatically converted to Markdown content. page = es . Page ( title = \"New Page\" ) page [ \"New Section\" ] = \"Example _markdown_ text.\" page . tree () {'New Page': [{'New Section': [{'Row 0': [{'Column 0': ['Markdown']}]}]}]}","title":"esparto._adaptors"},{"location":"03-api-reference/adaptors/#esparto._adaptors","text":"","title":"_adaptors"},{"location":"03-api-reference/content/","text":"esparto._content Info Content classes will usually be inferred from the content object type. They may be accessed via the top level module if required. import esparto as es # Create some new Markdown text markdown = es . Markdown ( \"Example _markdown_ text.\" ) Content Template for Content elements. Attributes: Name Type Description content Any Item to be included in the page - should match the encompassing Content class. display ( self ) Display rendered content in a Jupyter Notebook cell. Source code in esparto/_content.py def display ( self ) -> None : \"\"\"Display rendered content in a Jupyter Notebook cell.\"\"\" nb_display ( self ) to_html ( self , ** kwargs ) Convert content to HTML string. Returns: Type Description str str: HTML string. Source code in esparto/_content.py @abstractmethod def to_html ( self , ** kwargs : bool ) -> str : \"\"\"Convert content to HTML string. Returns: str: HTML string. \"\"\" raise NotImplementedError Markdown Markdown text content. Parameters: Name Type Description Default text str Markdown text to be added to document. required to_html ( self , ** kwargs ) Convert content to HTML string. Returns: Type Description str str: HTML string. Source code in esparto/_content.py def to_html ( self , ** kwargs : bool ) -> str : html = md . markdown ( self . content , extensions = [ \"extra\" , \"smarty\" ]) html = f \" { html } \\n \" html = f \"<div class='es-markdown'> \\n { html } \\n </div>\" return html DataFramePd Pandas DataFrame to be converted to table. Parameters: Name Type Description Default df pd.DataFrame A Pandas DataFrame required index bool If True, render the DataFrame index. (default = True) required col_space str, int Minimum column width in CSS units. Use int for pixels. (default = 0) required Attributes: Name Type Description css_classes List[str] CSS classes applied to the HTML output. to_html ( self , ** kwargs ) Convert content to HTML string. Returns: Type Description str str: HTML string. Source code in esparto/_content.py def to_html ( self , ** kwargs : bool ) -> str : html : str = self . content . to_html ( index = self . index , border = 0 , col_space = self . col_space , classes = self . css_classes , ) html = f \"<div class='table-responsive es-table'> { html } </div>\" return html FigureMpl Matplotlib figure. Parameters: Name Type Description Default figure plt.Figure A Matplotlib figure. required output_format str 'svg' or 'png'. (default = None) required pdf_figsize tuple, float Set figure size for PDF output. (default = None) Accepts a tuple of (height, width) or a float to use as scale factor. required to_html ( self , ** kwargs ) Convert content to HTML string. Returns: Type Description str str: HTML string. Source code in esparto/_content.py def to_html ( self , ** kwargs : bool ) -> str : if kwargs . get ( \"notebook_mode\" ): output_format = options . matplotlib . notebook_format else : output_format = self . output_format if kwargs . get ( \"pdf_mode\" ) and self . pdf_figsize : if isinstance ( self . pdf_figsize , float ): figsize = self . pdf_figsize * self . _original_figsize else : figsize = self . pdf_figsize self . content . set_size_inches ( * figsize ) self . content . tight_layout () if output_format == \"svg\" : string_buffer = StringIO () self . content . savefig ( string_buffer , format = \"svg\" ) string_buffer . seek ( 0 ) xml = string_buffer . read () dpi = 96 fig_width , fig_height = ( int ( val * dpi ) for val in self . content . get_size_inches () ) if kwargs . get ( \"pdf_mode\" ): xml = responsive_svg_mpl ( xml , width = int ( fig_width ), height = int ( fig_height ) ) temp_file = Path ( options . _pdf_temp_dir ) / f \" { uuid4 () } .svg\" temp_file . write_text ( xml ) inner = ( \"<object type='image/svg+xml' width='100%' height='100%' \" f \"data=' { temp_file . name } '></object> \\n \" ) else : xml = responsive_svg_mpl ( xml ) inner = xml html = ( f \"<div class='es-matplotlib-figure' style='width: min( { fig_width } px, 100%);'>\" f \" { inner } \\n </div> \\n \" ) # Reset figsize in case it was changed self . content . set_size_inches ( * self . _original_figsize ) return html # If not svg: bytes_buffer = BytesIO () self . content . savefig ( bytes_buffer , format = \"png\" ) bytes_buffer . seek ( 0 ) return Image ( bytes_buffer ) . to_html () FigureBokeh Bokeh object to be rendered as an interactive plot. Parameters: Name Type Description Default figure bokeh.layouts.LayoutDOM A Bokeh object. required layout_attributes dict Attributes set on figure . (default = None) required to_html ( self , ** kwargs ) Convert content to HTML string. Returns: Type Description str str: HTML string. Source code in esparto/_content.py def to_html ( self , ** kwargs : bool ) -> str : if self . layout_attributes : for key , value in self . layout_attributes . items (): setattr ( self . content , key , value ) # Bokeh to PDF is experimental and untested if kwargs . get ( \"pdf_mode\" ): # pragma: no cover from bokeh.io import export_svg # type: ignore temp_file = Path ( options . _pdf_temp_dir ) / f \" { uuid4 () } .svg\" export_svg ( self . content , filename = str ( temp_file )) html = f \"<img src=' { temp_file . name } ' width='100%' height='auto'> \\n \" return html html , js = components ( self . content ) # Remove outer <div> tag so we can give our own attributes html = _remove_outer_div ( html ) fig_width = self . content . properties_with_values () . get ( \"width\" , 1000 ) return ( \"<div class='es-bokeh-figure' \" f \"style='width: min( { fig_width } px, 100%);'>\" f \" \\n { html } \\n { js } \\n </div>\" ) FigurePlotly Plotly figure to be rendered as an interactive plot. Parameters: Name Type Description Default figure plotly.graph_objs._figure.Figure A Plotly figure. required layout_args dict Args passed to figure.update_layout() . (default = None) required to_html ( self , ** kwargs ) Convert content to HTML string. Returns: Type Description str str: HTML string. Source code in esparto/_content.py def to_html ( self , ** kwargs : bool ) -> str : if self . layout_args : self . content . update_layout ( ** self . layout_args ) # Default width is 700, default height is 450 fig_width : int = getattr ( self . content , \"width\" , 700 ) if kwargs . get ( \"pdf_mode\" ): temp_file = Path ( options . _pdf_temp_dir ) / f \" { uuid4 () } .svg\" self . content . write_image ( str ( temp_file )) inner = f \"<img src=' { temp_file . name } ' width='100%' height='auto'>\" else : inner = plotly_to_html ( self . content , include_plotlyjs = False , full_html = False ) # Remove outer <div> tag so we can give our own attributes. inner = _remove_outer_div ( inner ) html = f \"<div class='es-plotly-figure' style='width: min( { fig_width } px, 100%);'> { inner } \\n </div>\" # Reset layout in case it was changed self . content . update_layout ( self . _original_layout ) return html Image Image content. Can be read from a filepath, PIL.Image object, or from bytes. Note Requires optional Pillow library. Only one of scale , set_width , or set_height should be used. If more than one is populated, the values will be prioritised in the order: set_width -> set_height -> scale Parameters: Name Type Description Default image str, PIL.Image, BytesIO Image data. required caption str Image caption (default = None) required alt_text str Alternative text. (default = None) required scale float Scale image proportionately, must be > 0 and <= 1. (default = None) required set_width int Set width in pixels. (default = None) required set_height int Set height in pixels. (default = None) required rescale ( self , scale ) Resize the image by a scaling factor prior to rendering. Note Images can be scaled down only. Parameters: Name Type Description Default scale float Scaling ratio. required Source code in esparto/_content.py def rescale ( self , scale : float ) -> None : \"\"\"Resize the image by a scaling factor prior to rendering. Note: Images can be scaled down only. Args: scale (float): Scaling ratio. \"\"\" self . _scale = scale set_height ( self , height ) Set height of image. Parameters: Name Type Description Default height int New height in pixels. required Source code in esparto/_content.py def set_height ( self , height : int ) -> None : \"\"\"Set height of image. Args: height (int): New height in pixels. \"\"\" self . _height = height set_width ( self , width ) Set width of image. Parameters: Name Type Description Default width int New width in pixels. required Source code in esparto/_content.py def set_width ( self , width : int ) -> None : \"\"\"Set width of image. Args: width (int): New width in pixels. \"\"\" self . _width = width to_html ( self , ** kwargs ) Convert content to HTML string. Returns: Type Description str str: HTML string. Source code in esparto/_content.py def to_html ( self , ** kwargs : bool ) -> str : if isinstance ( self . content , PILImage ): image = self . content else : image = Img . open ( self . content ) if self . _width or self . _height or self . _scale : image = _rescale_image ( image , self . _width , self . _height , self . _scale ) image_encoded = _image_to_base64 ( image ) width , _ = image . size html = ( \"<figure class='es-figure'>\" \"<img class='img-fluid figure-img rounded es-image' \" f \"style='width: min( { int ( width ) } px, 100%);' \" f \"alt=' { self . alt_text } ' \" f \"src='data:image/png;base64, { image_encoded } '>\" ) if self . caption : html += f \"<figcaption class='figure-caption'> { self . caption } </figcaption>\" html += \"</figure>\" return html RawHTML Raw HTML content. Parameters: Name Type Description Default html str HTML string. required to_html ( self , ** kwargs ) Convert content to HTML string. Returns: Type Description str str: HTML string. Source code in esparto/_content.py def to_html ( self , ** kwargs : bool ) -> str : return self . content","title":"Content"},{"location":"03-api-reference/content/#esparto_content","text":"Info Content classes will usually be inferred from the content object type. They may be accessed via the top level module if required. import esparto as es # Create some new Markdown text markdown = es . Markdown ( \"Example _markdown_ text.\" )","title":"esparto._content"},{"location":"03-api-reference/content/#esparto._content.Content","text":"Template for Content elements. Attributes: Name Type Description content Any Item to be included in the page - should match the encompassing Content class.","title":"Content"},{"location":"03-api-reference/content/#esparto._content.Markdown","text":"Markdown text content. Parameters: Name Type Description Default text str Markdown text to be added to document. required","title":"Markdown"},{"location":"03-api-reference/content/#esparto._content.DataFramePd","text":"Pandas DataFrame to be converted to table. Parameters: Name Type Description Default df pd.DataFrame A Pandas DataFrame required index bool If True, render the DataFrame index. (default = True) required col_space str, int Minimum column width in CSS units. Use int for pixels. (default = 0) required Attributes: Name Type Description css_classes List[str] CSS classes applied to the HTML output.","title":"DataFramePd"},{"location":"03-api-reference/content/#esparto._content.FigureMpl","text":"Matplotlib figure. Parameters: Name Type Description Default figure plt.Figure A Matplotlib figure. required output_format str 'svg' or 'png'. (default = None) required pdf_figsize tuple, float Set figure size for PDF output. (default = None) Accepts a tuple of (height, width) or a float to use as scale factor. required","title":"FigureMpl"},{"location":"03-api-reference/content/#esparto._content.FigureBokeh","text":"Bokeh object to be rendered as an interactive plot. Parameters: Name Type Description Default figure bokeh.layouts.LayoutDOM A Bokeh object. required layout_attributes dict Attributes set on figure . (default = None) required","title":"FigureBokeh"},{"location":"03-api-reference/content/#esparto._content.FigurePlotly","text":"Plotly figure to be rendered as an interactive plot. Parameters: Name Type Description Default figure plotly.graph_objs._figure.Figure A Plotly figure. required layout_args dict Args passed to figure.update_layout() . (default = None) required","title":"FigurePlotly"},{"location":"03-api-reference/content/#esparto._content.Image","text":"Image content. Can be read from a filepath, PIL.Image object, or from bytes. Note Requires optional Pillow library. Only one of scale , set_width , or set_height should be used. If more than one is populated, the values will be prioritised in the order: set_width -> set_height -> scale Parameters: Name Type Description Default image str, PIL.Image, BytesIO Image data. required caption str Image caption (default = None) required alt_text str Alternative text. (default = None) required scale float Scale image proportionately, must be > 0 and <= 1. (default = None) required set_width int Set width in pixels. (default = None) required set_height int Set height in pixels. (default = None) required","title":"Image"},{"location":"03-api-reference/content/#esparto._content.RawHTML","text":"Raw HTML content. Parameters: Name Type Description Default html str HTML string. required","title":"RawHTML"},{"location":"03-api-reference/layout/","text":"esparto._layout Info Layout classes are accessed from the top level module. import esparto as es # Create a new Page page = es . Page () Layout Class Template for Layout elements. Layout class hierarchy: Page -> Section -> Row -> Column -> Content Attributes: Name Type Description title str Object title. Used as a title within the page and as a key value. children list Child items defining the page layout and content. title_classes list Additional CSS classes to apply to title. title_styles dict Additional CSS styles to apply to title. body_classes list Additional CSS classes to apply to body. body_styles dict Additional CSS styles to apply to body. display ( self ) Render content in a Notebook environment. Source code in esparto/_layout.py def display ( self ) -> None : \"\"\"Render content in a Notebook environment.\"\"\" nb_display ( self ) get_identifier ( self ) Get the HTML element ID for the current object. Source code in esparto/_layout.py def get_identifier ( self ) -> str : \"\"\"Get the HTML element ID for the current object.\"\"\" return clean_attr_name ( str ( self . title )) if self . title else self . _default_id get_title_identifier ( self ) Get the HTML element ID for the current object title. Source code in esparto/_layout.py def get_title_identifier ( self ) -> str : \"\"\"Get the HTML element ID for the current object title.\"\"\" return f \" { self . get_identifier () } -title\" set_children ( self , other ) Set children as other . Source code in esparto/_layout.py def set_children ( self , other : Union [ List [ Child ], Child ]) -> None : \"\"\"Set children as `other`.\"\"\" other = copy . copy ( other ) self . children = [ * self . _smart_wrap ( other )] for child in self . children : title = getattr ( child , \"title\" , None ) if title : self . _add_child_id ( title ) to_html ( self , ** kwargs ) Render object as HTML string. Returns: Type Description str html (str): HTML string. Source code in esparto/_layout.py def to_html ( self , ** kwargs : bool ) -> str : \"\"\"Render object as HTML string. Returns: html (str): HTML string. \"\"\" children_rendered = \" \" . join ([ c . to_html ( ** kwargs ) for c in self . children ]) title_rendered = ( render_html ( self . title_html_tag , self . title_classes , self . title_styles , self . title , self . get_title_identifier (), ) if self . title else \"\" ) html = render_html ( self . body_html_tag , self . body_classes , self . body_styles , f \" { title_rendered } \\n { children_rendered } \\n \" , self . get_identifier (), ) html = bs4 . BeautifulSoup ( html , \"html.parser\" ) . prettify () return html tree ( self ) Display page tree. Source code in esparto/_layout.py def tree ( self ) -> None : \"\"\"Display page tree.\"\"\" print ( self . _tree ()) Page Layout class that defines a Page. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required navbrand str Brand name. Displayed in the page navbar if provided. required table_of_contents bool, int Add a Table of Contents to the top of page. Passing an int will define the maximum depth. required max_width int Maximum page width expressed in pixels. required output_options es.OutputOptions Page specific rendering and output options. required children list Child items defining layout and content. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required save ( self , filepath = './esparto-doc.html' , return_html = False , dependency_source = None ) Save page to HTML file. Note Alias for self.save_html() . Parameters: Name Type Description Default filepath str Destination filepath. './esparto-doc.html' return_html bool If True, return HTML as a string. False dependency_source Optional[str] 'cdn' or 'inline'. None Returns: Type Description Optional[str] html (str): Document rendered as HTML. (If return_html is True) Source code in esparto/_layout.py def save ( self , filepath : str = \"./esparto-doc.html\" , return_html : bool = False , dependency_source : Optional [ str ] = None , ) -> Optional [ str ]: \"\"\" Save page to HTML file. Note: Alias for `self.save_html()`. Args: filepath (str): Destination filepath. return_html (bool): If True, return HTML as a string. dependency_source (str): 'cdn' or 'inline'. Returns: html (str): Document rendered as HTML. (If `return_html` is True) \"\"\" html = self . save_html ( filepath = filepath , return_html = return_html , dependency_source = dependency_source , ) if return_html : return html return None save_html ( self , filepath = './esparto-doc.html' , return_html = False , dependency_source = None ) Save page to HTML file. Parameters: Name Type Description Default filepath str Destination filepath. './esparto-doc.html' return_html bool If True, return HTML as a string. False dependency_source Optional[str] 'cdn' or 'inline'. None Returns: Type Description Optional[str] html (str): Document rendered as HTML. (If return_html is True) Source code in esparto/_layout.py def save_html ( self , filepath : str = \"./esparto-doc.html\" , return_html : bool = False , dependency_source : Optional [ str ] = None , ) -> Optional [ str ]: \"\"\" Save page to HTML file. Args: filepath (str): Destination filepath. return_html (bool): If True, return HTML as a string. dependency_source (str): 'cdn' or 'inline'. Returns: html (str): Document rendered as HTML. (If `return_html` is True) \"\"\" html = publish_html ( self , filepath = filepath , return_html = return_html , dependency_source = dependency_source , ) if return_html : return html return None save_pdf ( self , filepath = './esparto-doc.pdf' , return_html = False ) Save page to PDF file. Note Requires weasyprint library. Parameters: Name Type Description Default filepath str Destination filepath. './esparto-doc.pdf' return_html bool If True, return intermediate HTML representation as a string. False Returns: Type Description Optional[str] html (str): Document rendered as HTML. (If return_html is True) Source code in esparto/_layout.py def save_pdf ( self , filepath : str = \"./esparto-doc.pdf\" , return_html : bool = False ) -> Optional [ str ]: \"\"\" Save page to PDF file. Note: Requires `weasyprint` library. Args: filepath (str): Destination filepath. return_html (bool): If True, return intermediate HTML representation as a string. Returns: html (str): Document rendered as HTML. (If `return_html` is True) \"\"\" html = publish_pdf ( self , filepath , return_html = return_html ) if return_html : return html return None to_html ( self , ** kwargs ) Render object as HTML string. Returns: Type Description str html (str): HTML string. Source code in esparto/_layout.py def to_html ( self , ** kwargs : bool ) -> str : with OptionsContext ( self . output_options ): if self . table_of_contents : # Create a copy of the page and dynamically generate the TOC. # Copy is required so that TOC is not added multiple times and # always reflects the current content. max_depth = ( None if self . table_of_contents is True else self . table_of_contents ) page_copy = copy . copy ( self ) toc = table_of_contents ( page_copy , max_depth = max_depth ) page_copy . children . insert ( 0 , page_copy . _child_class ( title = \"Contents\" , children = [ toc ], title_classes = [ \"h4\" ] ), ) page_copy . table_of_contents = False return page_copy . to_html ( ** kwargs ) self . body_styles . update ({ \"max-width\" : f \" { self . max_width } px\" }) return super () . to_html ( ** kwargs ) Section Layout class that defines a Section. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required CardSection Layout class that defines a CardSection. CardSections wrap content in Cards by default. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required cards_equal bool Cards in the same Row are stretched vertically if True. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required Row Layout class that defines a Row. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required CardRow Layout class that defines a CardRow. CardRows wrap content in Cards by default. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required CardRowEqual Layout class that defines a CardRow with Cards of equal height. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required Column Layout class that defines a Column. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required col_width int Fix column width - must be between 1 and 12. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required Card Layout class that defines a Card. Child items will be vertically stacked by default. Horizontal arrangement is achieved by nesting content inside a Row. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required col_width int Fix column width - must be between 1 and 12. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required to_html ( self , ** kwargs ) Render content to HTML string. Returns: Type Description str html (str): HTML string. Source code in esparto/_layout.py def to_html ( self , ** kwargs : bool ) -> str : \"\"\"Render content to HTML string. Returns: html (str): HTML string. \"\"\" children_rendered = \" \" . join ([ c . to_html ( ** kwargs ) for c in self . children ]) title_rendered = ( render_html ( self . title_html_tag , self . title_classes , self . title_styles , self . title , self . get_title_identifier (), ) if self . title else \"\" ) card_body_classes = [ \"es-card-body\" ] card_body_styles : Dict [ str , str ] = {} html_body = render_html ( \"div\" , card_body_classes , card_body_styles , f \" \\n { title_rendered } \\n { children_rendered } \\n \" , f \" { self . get_identifier () } -body\" , ) html_full = render_html ( self . body_html_tag , self . body_classes , self . body_styles , f \" \\n { html_body } \\n \" , f \" { self . get_identifier () } \" , ) return html_full Spacer Empty Column for making space within a Row. PageBreak Defines a page break when printing or saving to PDF.","title":"Layout"},{"location":"03-api-reference/layout/#esparto_layout","text":"Info Layout classes are accessed from the top level module. import esparto as es # Create a new Page page = es . Page ()","title":"esparto._layout"},{"location":"03-api-reference/layout/#esparto._layout.Layout","text":"Class Template for Layout elements. Layout class hierarchy: Page -> Section -> Row -> Column -> Content Attributes: Name Type Description title str Object title. Used as a title within the page and as a key value. children list Child items defining the page layout and content. title_classes list Additional CSS classes to apply to title. title_styles dict Additional CSS styles to apply to title. body_classes list Additional CSS classes to apply to body. body_styles dict Additional CSS styles to apply to body.","title":"Layout"},{"location":"03-api-reference/layout/#esparto._layout.Page","text":"Layout class that defines a Page. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required navbrand str Brand name. Displayed in the page navbar if provided. required table_of_contents bool, int Add a Table of Contents to the top of page. Passing an int will define the maximum depth. required max_width int Maximum page width expressed in pixels. required output_options es.OutputOptions Page specific rendering and output options. required children list Child items defining layout and content. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required","title":"Page"},{"location":"03-api-reference/layout/#esparto._layout.Section","text":"Layout class that defines a Section. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required","title":"Section"},{"location":"03-api-reference/layout/#esparto._layout.CardSection","text":"Layout class that defines a CardSection. CardSections wrap content in Cards by default. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required cards_equal bool Cards in the same Row are stretched vertically if True. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required","title":"CardSection"},{"location":"03-api-reference/layout/#esparto._layout.Row","text":"Layout class that defines a Row. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required","title":"Row"},{"location":"03-api-reference/layout/#esparto._layout.CardRow","text":"Layout class that defines a CardRow. CardRows wrap content in Cards by default. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required","title":"CardRow"},{"location":"03-api-reference/layout/#esparto._layout.CardRowEqual","text":"Layout class that defines a CardRow with Cards of equal height. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required","title":"CardRowEqual"},{"location":"03-api-reference/layout/#esparto._layout.Column","text":"Layout class that defines a Column. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required col_width int Fix column width - must be between 1 and 12. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required","title":"Column"},{"location":"03-api-reference/layout/#esparto._layout.Card","text":"Layout class that defines a Card. Child items will be vertically stacked by default. Horizontal arrangement is achieved by nesting content inside a Row. Parameters: Name Type Description Default title str Used as a title within the page and as a key value. required children list Child items defining layout and content. required col_width int Fix column width - must be between 1 and 12. required title_classes list Additional CSS classes to apply to title. required title_styles dict Additional CSS styles to apply to title. required body_classes list Additional CSS classes to apply to body. required body_styles dict Additional CSS styles to apply to body. required","title":"Card"},{"location":"03-api-reference/layout/#esparto._layout.Spacer","text":"Empty Column for making space within a Row.","title":"Spacer"},{"location":"03-api-reference/layout/#esparto._layout.PageBreak","text":"Defines a page break when printing or saving to PDF.","title":"PageBreak"},{"location":"03-api-reference/options/","text":"esparto._options Info Default output options are configured through es.options . OutputOptions dataclass Options for configuring page rendering and output. Config options will automatically be loaded if a yaml file is found at either ./esparto-config.yaml or ~/esparto-data/esparto-config.yaml . Attributes: Name Type Description dependency_source str How dependencies should be provisioned: 'cdn' or 'inline'. bootstrap_cdn str Link to Bootstrap CDN. Used if dependency source is 'cdn'. Alternative links are available from esparto.bootstrap_cdn_themes . bootstrap_css str Path to Bootstrap CSS file. Used if dependency source is 'inline'. esparto_css str Path to additional CSS file with esparto specific styles. jinja_template str Path to Jinja HTML page template. matplotlib MatplotlibOptions Additional config options for Matplotlib. plotly PlotlyOptions Additional config options for Plotly. bokeh BokehOptions Additional config options for Bokeh. load ( self , path ) Load config from yaml file at path . Source code in esparto/_options.py def load ( self , path : Union [ str , Path ]) -> None : \"\"\"Load config from yaml file at `path`.\"\"\" path = Path ( path ) yaml_str = path . read_text () self = yaml . unsafe_load ( yaml_str ) self . _options_source = str ( path ) save ( self , path = './esparto-config.yaml' ) Save config to yaml file at path . Source code in esparto/_options.py def save ( self , path : Union [ str , Path ] = \"./esparto-config.yaml\" ) -> None : \"\"\"Save config to yaml file at `path`.\"\"\" path = Path ( path ) self_copy = copy . copy ( self ) del self_copy . _options_source yaml_str = yaml . dump ( self_copy ) path . write_text ( yaml_str ) MatplotlibOptions dataclass Options for Matplotlib output. Attributes: Name Type Description html_output_format str How plots are rendered in HTML: 'png' or 'svg'. notebook_format str How plots are rendered in Jupyter Notebooks: 'png' or 'svg'. pdf_figsize tuple or int Specify size of Matplotlib figures in PDF output. An integer tuple can be passed as: (height, width). A float can be passed as a scaling factor. PlotlyOptions dataclass Options for Plotly output. Attributes: Name Type Description layout_args dict Arguments passed to figure.update_layout() at rendering time. BokehOptions dataclass Options for Bokeh output. Attributes: Name Type Description layout_attributes dict Bokeh layout object attributes to set at rendering time.","title":"Options"},{"location":"03-api-reference/options/#esparto_options","text":"Info Default output options are configured through es.options .","title":"esparto._options"},{"location":"03-api-reference/options/#esparto._options.OutputOptions","text":"Options for configuring page rendering and output. Config options will automatically be loaded if a yaml file is found at either ./esparto-config.yaml or ~/esparto-data/esparto-config.yaml . Attributes: Name Type Description dependency_source str How dependencies should be provisioned: 'cdn' or 'inline'. bootstrap_cdn str Link to Bootstrap CDN. Used if dependency source is 'cdn'. Alternative links are available from esparto.bootstrap_cdn_themes . bootstrap_css str Path to Bootstrap CSS file. Used if dependency source is 'inline'. esparto_css str Path to additional CSS file with esparto specific styles. jinja_template str Path to Jinja HTML page template. matplotlib MatplotlibOptions Additional config options for Matplotlib. plotly PlotlyOptions Additional config options for Plotly. bokeh BokehOptions Additional config options for Bokeh.","title":"OutputOptions"},{"location":"03-api-reference/options/#esparto._options.MatplotlibOptions","text":"Options for Matplotlib output. Attributes: Name Type Description html_output_format str How plots are rendered in HTML: 'png' or 'svg'. notebook_format str How plots are rendered in Jupyter Notebooks: 'png' or 'svg'. pdf_figsize tuple or int Specify size of Matplotlib figures in PDF output. An integer tuple can be passed as: (height, width). A float can be passed as a scaling factor.","title":"MatplotlibOptions"},{"location":"03-api-reference/options/#esparto._options.PlotlyOptions","text":"Options for Plotly output. Attributes: Name Type Description layout_args dict Arguments passed to figure.update_layout() at rendering time.","title":"PlotlyOptions"},{"location":"03-api-reference/options/#esparto._options.BokehOptions","text":"Options for Bokeh output. Attributes: Name Type Description layout_attributes dict Bokeh layout object attributes to set at rendering time.","title":"BokehOptions"},{"location":"03-api-reference/publish/","text":"esparto._publish Info Publishing methods are accessed via Layout classes. import esparto as es # Create a new Page page = es . Page ( title = \"My New Page\" ) # Publish the page to an HTML file: page . save_html ( \"my-page.html\" ) # Or as a PDF: page . save_pdf ( \"my-page.pdf\" ) publish_html ( page , filepath = './esparto-doc.html' , return_html = False , dependency_source = None , esparto_css = None , jinja_template = None , ** kwargs ) Save page to HTML. Parameters: Name Type Description Default page Page A Page object. required filepath Optional[str] Filepath to write to. './esparto-doc.html' return_html bool Returns HTML string if True. False dependency_source Optional[str] One of 'cdn' or 'inline' (default = None). None esparto_css Optional[str] Path to CSS stylesheet. (default = None). None jinja_template Optional[str] Path to Jinja template. (default = None). None **kwargs bool Arguments passed to page.to_html() . {} Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def publish_html ( page : \"Page\" , filepath : Optional [ str ] = \"./esparto-doc.html\" , return_html : bool = False , dependency_source : Optional [ str ] = None , esparto_css : Optional [ str ] = None , jinja_template : Optional [ str ] = None , ** kwargs : bool , ) -> Optional [ str ]: \"\"\"Save page to HTML. Args: page (Page): A Page object. filepath (str): Filepath to write to. return_html (bool): Returns HTML string if True. dependency_source (str): One of 'cdn' or 'inline' (default = None). esparto_css (str): Path to CSS stylesheet. (default = None). jinja_template (str): Path to Jinja template. (default = None). **kwargs (Dict[str, Any]): Arguments passed to `page.to_html()`. Returns: str: HTML string if return_html is True. \"\"\" required_deps = page . _required_dependencies () dependency_source = dependency_source or options . dependency_source resolved_deps = resolve_deps ( required_deps , source = dependency_source ) esparto_css = Path ( resolve_config_option ( \"esparto_css\" , esparto_css )) . read_text () page_html = page . to_html ( ** kwargs ) jinja_template_object = Template ( Path ( resolve_config_option ( \"jinja_template\" , jinja_template )) . read_text () ) html_rendered : str = jinja_template_object . render ( navbrand = page . navbrand , doc_title = page . title , esparto_css = esparto_css , content = page_html , head_deps = resolved_deps . head , tail_deps = resolved_deps . tail , ) html_rendered = _prettify_html ( html_rendered ) html_rendered = _relocate_scripts ( html_rendered ) if filepath : Path ( filepath ) . write_text ( html_rendered ) if return_html : return html_rendered return None publish_pdf ( page , filepath = './esparto-doc.pdf' , return_html = False ) Save page to PDF. Parameters: Name Type Description Default page Page A Page object. required filepath str Filepath to write to. './esparto-doc.pdf' return_html bool Returns HTML string if True. False Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def publish_pdf ( page : \"Page\" , filepath : str = \"./esparto-doc.pdf\" , return_html : bool = False ) -> Optional [ str ]: \"\"\"Save page to PDF. Args: page (Layout): A Page object. filepath (str): Filepath to write to. return_html (bool): Returns HTML string if True. Returns: str: HTML string if return_html is True. \"\"\" if \"weasyprint\" not in _INSTALLED_MODULES : raise ModuleNotFoundError ( \"Install weasyprint for PDF support\" ) import weasyprint as wp # type: ignore temp_dir = Path ( options . _pdf_temp_dir ) temp_dir . mkdir ( parents = True , exist_ok = True ) html_rendered = publish_html ( page = page , filepath = None , return_html = True , dependency_source = \"inline\" , pdf_mode = True , ) pdf_doc = wp . HTML ( string = html_rendered , base_url = options . _pdf_temp_dir ) . render () pdf_doc . metadata . title = page . title pdf_doc . write_pdf ( filepath ) for f in temp_dir . iterdir (): f . unlink () temp_dir . rmdir () html_prettified = _prettify_html ( html_rendered ) if return_html : return html_prettified return None nb_display ( item , return_html = False , dependency_source = None ) Display Layout or Content to Jupyter Notebook cell. Parameters: Name Type Description Default item Union[Layout, Content] A Layout or Content item. required return_html bool Returns HTML string if True. False dependency_source Optional[str] One of 'cdn', 'inline', or 'esparto.options'. None Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def nb_display ( item : Union [ \"Layout\" , \"Content\" ], return_html : bool = False , dependency_source : Optional [ str ] = None , ) -> Optional [ str ]: \"\"\"Display Layout or Content to Jupyter Notebook cell. Args: item (Layout, Content): A Layout or Content item. return_html (bool): Returns HTML string if True. dependency_source (str): One of 'cdn', 'inline', or 'esparto.options'. Returns: str: HTML string if return_html is True. \"\"\" from IPython.display import HTML , display # type: ignore from esparto._layout import Layout if isinstance ( item , Layout ): required_deps = item . _required_dependencies () else : required_deps = getattr ( item , \"_dependencies\" , set ()) dependency_source = dependency_source or options . dependency_source resolved_deps = resolve_deps ( required_deps , source = dependency_source ) esparto_css = Path ( options . esparto_css ) . read_text () head_deps = \" \\n \" . join ( resolved_deps . head ) tail_deps = \" \\n \" . join ( resolved_deps . tail ) html = item . to_html ( notebook_mode = True ) html_rendered = ( f \"<div class='container' style='width: 100%; height: 100%;'> \\n { html } \\n </div> \\n \" ) html_rendered += f \"<style> \\n { esparto_css } \\n </style> \\n \" html_rendered = ( f \"<!doctype html> \\n <html> \\n <head> { head_deps } </head> \\n \" f \"<body> \\n { html_rendered } \\n { tail_deps } \\n </body> \\n </html> \\n \" ) html_rendered = _relocate_scripts ( html_rendered ) print () # This allows time to download plotly.js from the CDN - otherwise cell can render empty if \"plotly\" in required_deps and dependency_source == \"cdn\" : display ( HTML ( f \"<head> \\n { head_deps } \\n </head> \\n \" ), metadata = dict ( isolated = True )) time . sleep ( 2 ) # Temporary solution to prevent Jupyter Notebook cell fully collapsing before content renders if \"bokeh\" in required_deps : extra_css = \"<style>.container { min-height: 30em !important; }</style>\" else : extra_css = \"\" display ( HTML ( extra_css + html_rendered ), metadata = dict ( isolated = True )) print () if return_html : return html_rendered return None","title":"Publish"},{"location":"03-api-reference/publish/#esparto_publish","text":"Info Publishing methods are accessed via Layout classes. import esparto as es # Create a new Page page = es . Page ( title = \"My New Page\" ) # Publish the page to an HTML file: page . save_html ( \"my-page.html\" ) # Or as a PDF: page . save_pdf ( \"my-page.pdf\" )","title":"esparto._publish"},{"location":"03-api-reference/publish/#esparto._publish.publish_html","text":"Save page to HTML. Parameters: Name Type Description Default page Page A Page object. required filepath Optional[str] Filepath to write to. './esparto-doc.html' return_html bool Returns HTML string if True. False dependency_source Optional[str] One of 'cdn' or 'inline' (default = None). None esparto_css Optional[str] Path to CSS stylesheet. (default = None). None jinja_template Optional[str] Path to Jinja template. (default = None). None **kwargs bool Arguments passed to page.to_html() . {} Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def publish_html ( page : \"Page\" , filepath : Optional [ str ] = \"./esparto-doc.html\" , return_html : bool = False , dependency_source : Optional [ str ] = None , esparto_css : Optional [ str ] = None , jinja_template : Optional [ str ] = None , ** kwargs : bool , ) -> Optional [ str ]: \"\"\"Save page to HTML. Args: page (Page): A Page object. filepath (str): Filepath to write to. return_html (bool): Returns HTML string if True. dependency_source (str): One of 'cdn' or 'inline' (default = None). esparto_css (str): Path to CSS stylesheet. (default = None). jinja_template (str): Path to Jinja template. (default = None). **kwargs (Dict[str, Any]): Arguments passed to `page.to_html()`. Returns: str: HTML string if return_html is True. \"\"\" required_deps = page . _required_dependencies () dependency_source = dependency_source or options . dependency_source resolved_deps = resolve_deps ( required_deps , source = dependency_source ) esparto_css = Path ( resolve_config_option ( \"esparto_css\" , esparto_css )) . read_text () page_html = page . to_html ( ** kwargs ) jinja_template_object = Template ( Path ( resolve_config_option ( \"jinja_template\" , jinja_template )) . read_text () ) html_rendered : str = jinja_template_object . render ( navbrand = page . navbrand , doc_title = page . title , esparto_css = esparto_css , content = page_html , head_deps = resolved_deps . head , tail_deps = resolved_deps . tail , ) html_rendered = _prettify_html ( html_rendered ) html_rendered = _relocate_scripts ( html_rendered ) if filepath : Path ( filepath ) . write_text ( html_rendered ) if return_html : return html_rendered return None","title":"publish_html()"},{"location":"03-api-reference/publish/#esparto._publish.publish_pdf","text":"Save page to PDF. Parameters: Name Type Description Default page Page A Page object. required filepath str Filepath to write to. './esparto-doc.pdf' return_html bool Returns HTML string if True. False Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def publish_pdf ( page : \"Page\" , filepath : str = \"./esparto-doc.pdf\" , return_html : bool = False ) -> Optional [ str ]: \"\"\"Save page to PDF. Args: page (Layout): A Page object. filepath (str): Filepath to write to. return_html (bool): Returns HTML string if True. Returns: str: HTML string if return_html is True. \"\"\" if \"weasyprint\" not in _INSTALLED_MODULES : raise ModuleNotFoundError ( \"Install weasyprint for PDF support\" ) import weasyprint as wp # type: ignore temp_dir = Path ( options . _pdf_temp_dir ) temp_dir . mkdir ( parents = True , exist_ok = True ) html_rendered = publish_html ( page = page , filepath = None , return_html = True , dependency_source = \"inline\" , pdf_mode = True , ) pdf_doc = wp . HTML ( string = html_rendered , base_url = options . _pdf_temp_dir ) . render () pdf_doc . metadata . title = page . title pdf_doc . write_pdf ( filepath ) for f in temp_dir . iterdir (): f . unlink () temp_dir . rmdir () html_prettified = _prettify_html ( html_rendered ) if return_html : return html_prettified return None","title":"publish_pdf()"},{"location":"03-api-reference/publish/#esparto._publish.nb_display","text":"Display Layout or Content to Jupyter Notebook cell. Parameters: Name Type Description Default item Union[Layout, Content] A Layout or Content item. required return_html bool Returns HTML string if True. False dependency_source Optional[str] One of 'cdn', 'inline', or 'esparto.options'. None Returns: Type Description Optional[str] str: HTML string if return_html is True. Source code in esparto/_publish.py def nb_display ( item : Union [ \"Layout\" , \"Content\" ], return_html : bool = False , dependency_source : Optional [ str ] = None , ) -> Optional [ str ]: \"\"\"Display Layout or Content to Jupyter Notebook cell. Args: item (Layout, Content): A Layout or Content item. return_html (bool): Returns HTML string if True. dependency_source (str): One of 'cdn', 'inline', or 'esparto.options'. Returns: str: HTML string if return_html is True. \"\"\" from IPython.display import HTML , display # type: ignore from esparto._layout import Layout if isinstance ( item , Layout ): required_deps = item . _required_dependencies () else : required_deps = getattr ( item , \"_dependencies\" , set ()) dependency_source = dependency_source or options . dependency_source resolved_deps = resolve_deps ( required_deps , source = dependency_source ) esparto_css = Path ( options . esparto_css ) . read_text () head_deps = \" \\n \" . join ( resolved_deps . head ) tail_deps = \" \\n \" . join ( resolved_deps . tail ) html = item . to_html ( notebook_mode = True ) html_rendered = ( f \"<div class='container' style='width: 100%; height: 100%;'> \\n { html } \\n </div> \\n \" ) html_rendered += f \"<style> \\n { esparto_css } \\n </style> \\n \" html_rendered = ( f \"<!doctype html> \\n <html> \\n <head> { head_deps } </head> \\n \" f \"<body> \\n { html_rendered } \\n { tail_deps } \\n </body> \\n </html> \\n \" ) html_rendered = _relocate_scripts ( html_rendered ) print () # This allows time to download plotly.js from the CDN - otherwise cell can render empty if \"plotly\" in required_deps and dependency_source == \"cdn\" : display ( HTML ( f \"<head> \\n { head_deps } \\n </head> \\n \" ), metadata = dict ( isolated = True )) time . sleep ( 2 ) # Temporary solution to prevent Jupyter Notebook cell fully collapsing before content renders if \"bokeh\" in required_deps : extra_css = \"<style>.container { min-height: 30em !important; }</style>\" else : extra_css = \"\" display ( HTML ( extra_css + html_rendered ), metadata = dict ( isolated = True )) print () if return_html : return html_rendered return None","title":"nb_display()"},{"location":"04-about/authors/","text":"Credits Lead Developer Dominic Thorn dominic.thorn@gmail.com domvwt.github.io","title":"Authors"},{"location":"04-about/authors/#credits","text":"","title":"Credits"},{"location":"04-about/authors/#lead-developer","text":"Dominic Thorn dominic.thorn@gmail.com domvwt.github.io","title":"Lead Developer"},{"location":"04-about/license/","text":"MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Copyright (c) 2021 - Dominic Thorn","title":"License"},{"location":"04-about/license/#mit-license","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Copyright (c) 2021 - Dominic Thorn","title":"MIT License"},{"location":"04-about/release-notes/","text":"Release Notes 3.0.0 (2022-02-23) API Page now accepts max_width and output_options arguments Content classes no longer accept width or height arguments New Features Output rendering options can now be configured at page level Additional markdown features recognised Fixes JavaScript is now placed at end of page so HTML is loaded first Page Style Removed unnecessary indentation Tables now render in minimal, clean style Improvements to sizing and centring of plots Cleaned up unnecessary HTML and CSS Majority of CSS attributes moved to esparto.css Dependencies Pillow is now optional BeautifulSoup4 is now required Upper version limits removed from all Other Type hints implemented with ~100% coverage 2.0.0 (2021-09-19) New Features Links to Bootswatch CDN for page themes Reorganise and add options to esparto.options Table of Contents generator for Page element Save and Load config options Define Columns and Cards as dict of {\"title\": content} Add or replace Content by positional index New Layout Classes CardSection: Section with Cards as the default Content container CardRow: Row of Cards CardRowEqual: Row of equal width cards 1.3.0 (2021-07-19) New Layout class Card: Bordered container for grouping content Updated Content class FigureMpl: SVG rendered plots now flex up to 150% of original size Other Defined string and repr representations for current settings Updated CSS so maintain distance from header if main title is not defined Updated content adaptor to allow other Layout objects as valid children for Column 1.2.0 (2021-06-28) Implicitly read Markdown text files 1.1.0 (2021-06-18) New Layout classes Spacer: make an empty column within a Row PageBreak: enforce a page break in printed / PDF documents New Content class RawHTML: place raw HTML code in the page Updated Content classes DataFramePd: add new CSS style to minimise row height FigureMpl: SVG rendered plots are now responsive and horizontally centred New publishing features CSS stylesheet path can be passed to options.css_styles Jinja template path can be passed to options.jinja_template 1.0.1 (2021-06-01) Update dependencies Fix SVG rendering in PDF Update docs and examples 1.0.0 (2021-05-31) Improve API Responsive SVG plots Update Jinja template to remove branding Refactor codebase 0.2.5 (2021-05-06) Fix linting errors Add dataclasses dependency for Python < 3.7 0.2.4 (2021-05-04) Fix bug corrupting page titles Lazy load the content dependency dict Remove unused code 0.2.3 (2021-05-03) Make documents 'print friendly' Output to PDF with weasyprint Export matplotlib plots as SVG by default Use esparto.options for configuring behaviour 0.2.2 (2021-04-24) Fix notebook display for Colab 0.2.1 (2021-04-24) Add Bootstrap dependencies for relevant content classes Inherit FigureBokeh height from Bokeh object Fix issues with in-notebook content rendering 0.2.0 (2021-04-23) Add support for Bokeh and Plotly 0.1.2 (2021-04-09) Relax dependency on Pillow to allow versions >=7.0.0 and <9.0.0 0.1.1 (2021-04-08) Update package metadata for pypi 0.1.0 (2021-04-07) First public release","title":"Release Notes"},{"location":"04-about/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"04-about/release-notes/#300-2022-02-23","text":"API Page now accepts max_width and output_options arguments Content classes no longer accept width or height arguments New Features Output rendering options can now be configured at page level Additional markdown features recognised Fixes JavaScript is now placed at end of page so HTML is loaded first Page Style Removed unnecessary indentation Tables now render in minimal, clean style Improvements to sizing and centring of plots Cleaned up unnecessary HTML and CSS Majority of CSS attributes moved to esparto.css Dependencies Pillow is now optional BeautifulSoup4 is now required Upper version limits removed from all Other Type hints implemented with ~100% coverage","title":"3.0.0 (2022-02-23)"},{"location":"04-about/release-notes/#200-2021-09-19","text":"New Features Links to Bootswatch CDN for page themes Reorganise and add options to esparto.options Table of Contents generator for Page element Save and Load config options Define Columns and Cards as dict of {\"title\": content} Add or replace Content by positional index New Layout Classes CardSection: Section with Cards as the default Content container CardRow: Row of Cards CardRowEqual: Row of equal width cards","title":"2.0.0 (2021-09-19)"},{"location":"04-about/release-notes/#130-2021-07-19","text":"New Layout class Card: Bordered container for grouping content Updated Content class FigureMpl: SVG rendered plots now flex up to 150% of original size Other Defined string and repr representations for current settings Updated CSS so maintain distance from header if main title is not defined Updated content adaptor to allow other Layout objects as valid children for Column","title":"1.3.0 (2021-07-19)"},{"location":"04-about/release-notes/#120-2021-06-28","text":"Implicitly read Markdown text files","title":"1.2.0 (2021-06-28)"},{"location":"04-about/release-notes/#110-2021-06-18","text":"New Layout classes Spacer: make an empty column within a Row PageBreak: enforce a page break in printed / PDF documents New Content class RawHTML: place raw HTML code in the page Updated Content classes DataFramePd: add new CSS style to minimise row height FigureMpl: SVG rendered plots are now responsive and horizontally centred New publishing features CSS stylesheet path can be passed to options.css_styles Jinja template path can be passed to options.jinja_template","title":"1.1.0 (2021-06-18)"},{"location":"04-about/release-notes/#101-2021-06-01","text":"Update dependencies Fix SVG rendering in PDF Update docs and examples","title":"1.0.1 (2021-06-01)"},{"location":"04-about/release-notes/#100-2021-05-31","text":"Improve API Responsive SVG plots Update Jinja template to remove branding Refactor codebase","title":"1.0.0 (2021-05-31)"},{"location":"04-about/release-notes/#025-2021-05-06","text":"Fix linting errors Add dataclasses dependency for Python < 3.7","title":"0.2.5 (2021-05-06)"},{"location":"04-about/release-notes/#024-2021-05-04","text":"Fix bug corrupting page titles Lazy load the content dependency dict Remove unused code","title":"0.2.4 (2021-05-04)"},{"location":"04-about/release-notes/#023-2021-05-03","text":"Make documents 'print friendly' Output to PDF with weasyprint Export matplotlib plots as SVG by default Use esparto.options for configuring behaviour","title":"0.2.3 (2021-05-03)"},{"location":"04-about/release-notes/#022-2021-04-24","text":"Fix notebook display for Colab","title":"0.2.2 (2021-04-24)"},{"location":"04-about/release-notes/#021-2021-04-24","text":"Add Bootstrap dependencies for relevant content classes Inherit FigureBokeh height from Bokeh object Fix issues with in-notebook content rendering","title":"0.2.1 (2021-04-24)"},{"location":"04-about/release-notes/#020-2021-04-23","text":"Add support for Bokeh and Plotly","title":"0.2.0 (2021-04-23)"},{"location":"04-about/release-notes/#012-2021-04-09","text":"Relax dependency on Pillow to allow versions >=7.0.0 and <9.0.0","title":"0.1.2 (2021-04-09)"},{"location":"04-about/release-notes/#011-2021-04-08","text":"Update package metadata for pypi","title":"0.1.1 (2021-04-08)"},{"location":"04-about/release-notes/#010-2021-04-07","text":"First public release","title":"0.1.0 (2021-04-07)"}]}